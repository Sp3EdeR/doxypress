/************************************************************************
*
* Copyright (C) 2014-2019 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 219
#define YY_END_OF_BUFFER 220
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[829] =
    {   0,
       88,   88,  137,  137,  151,  151,  166,  166,  210,  210,
      157,  157,  220,  219,   50,  219,   50,  219,   48,  219,
       50,  219,   50,  219,   50,  219,   50,  219,   47,   50,
      219,   50,  219,   50,  219,   30,   50,  219,   50,  219,
       50,  219,   50,  219,   50,  219,   50,  219,   50,  219,
       50,  219,   47,   50,  219,   50,  219,   50,  219,  102,
      219,  101,  219,  102,  219,   99,  102,  219,  102,  219,
      102,  219,  219,  103,  219,  127,  219,  126,  219,  127,
      219,  124,  127,  219,  127,  219,   83,  219,   83,  219,
       82,  219,   83,  219,   83,  219,   83,  219,   79,   83,

      219,   83,  219,   83,  219,   87,  219,   86,  219,   87,
      219,   84,   87,  219,   87,  219,   87,  219,   87,  219,
       91,  219,   90,  219,   88,   91,  219,   88,   91,  219,
       91,  219,   88,   91,  219,   88,   91,  219,   91,  219,
       83,  219,   82,  219,   83,  219,   83,  219,   83,  219,
       83,  219,   83,  219,  115,  219,  114,  219,  112,  115,
      219,  115,  219,  119,  219,  118,  219,  119,  219,  119,
      219,  123,  219,  122,  219,  123,  219,  123,  219,  111,
      219,  108,  219,  111,  219,  109,  111,  219,  111,  219,
      111,  219,  107,  219,  107,  219,  105,  107,  219,  106,

      107,  219,16488,   69,  219,   68,  219,   69,  219,   66,
       69,  219,   69,  219,   73,  219,   73,  219,   72,  219,
       73,  219,   73,  219,   73,  219,   70,   73,  219,   73,
      219,   73,  219,   77,  219,   76,  219,   77,  219,   74,
       77,  219,   77,  219,   95,  219,   94,  219,   92,   95,
      219,   95,  219,   97,  219,   98,  219,   97,  219,  133,
      219,  132,  219,  131,  133,  219,  133,  219,  137,  140,
      219,  134,  219,  137,  140,  219,  140,  219,  140,  219,
      142,  219,  141,  219,  219,  145,  219,  145,  219,  143,
      219,  145,  219,  145,  219,  151,  155,  219,  152,  219,

      155,  219,  155,  219,  155,  219,  155,  219,  155,  219,
      130,  219,  128,  219,  130,  219,  164,  219,  164,  219,
      162,  219,  156,  164,  219,  161,  164,  219,  164,  219,
      167,  219,  166,  167,  219,  165,  219,  167,  219,  174,
      175,  219,  173,  219,  175,  219,  175,  219,  175,  219,
      185,  186,  219,  176,  219,  186,  219,  186,  219,  186,
      219,  189,  219,  187,  219,  189,  219,  193,  219,  191,
      219,  190,  193,  219,  193,  219,  196,  199,  219,  194,
      219,  197,  199,  219,  198,  199,  219,  199,  219,  199,
      219,  202,  219,  200,  219,  202,  219,  205,  219,  204,

      219,  205,  219,  203,  205,  219,  205,  219,  208,  219,
      207,  219,  208,  219,  206,  208,  219,  208,  219,   63,
       65,  219,   64,  219,   65,  219,   65,  219,  148,  219,
      147,  219,  146,  148,  219,  148,  219,   53,   54,  219,
       52,  219,   54,  219,   54,  219,  210,  212,  219,  211,
      219,  212,  219,  212,  219,  212,  219,  215,  219,  214,
      219,  215,  219,  213,  215,  219,  215,  219,  217,  218,
      219,  216,  219,  218,  219,  157,  219,  157,  160,  219,
      158,  219,  159,  219,   58,   59,  219,   56,  219,   57,
       59,  219,   59,  219,   59,  219,   46,    4,   39,   41,

       43,   41,   29,   29,   21,   21,   21,   21,   27,   28,
       23,   29,   30,   21,   21,   21,   21,   21,   49,   33,
       34,   39,   31,   99,   99,  100,   99,  103,  124,  124,
      125,   79,   79,   81,   79,   84,   84,   85,   84,   88,
       88,   88,   88,   88,   88,   89,   88,  112,  113,  116,
      117,  121,  120,  121,  109,  109,  110,  109,  106,16488,
     8296,  106,16488,   66,   66,   66,   67,   70,   70,   71,
       70,   74,   74,   75,   92,   93,   97,   97,   96,   97,
      131,  137,  134,  137,  139,  139,  136,  141,  144,  151,
      154,  153,  129,  156,  161,  163,  166,  165,  174,  185,

      188,  190,  192,  196,  195,  201,  203,  203,  206,  206,
       63,  146,   53,  210,  209,  213,  217,  157,   58,   29,
       40,   38,   45,   41,   45,   45,   45,   41,   45,   45,
       42,    6,   37,    1,    1,    2,   21,   21,   25,   26,
       21,   23,    5,   21,   21,   21,   35,   38,   32,   99,
       99,   79,   84,   84,   88,   88,   88,  109,  109,   66,
       66,   66,   66,   70,   74,   97,  138,   60,   61,   62,
       51,  209,  213,  213,   55,   45,   45,   16,   36,    1,
       22,    2,   20,   21,   21,   21,   21,   21,   99,   78,
       84,   88,   88,   80,  109,   66,   66,   66,   74,   97,

      138,  169,  177,   51,  213,   15,   44,    6,   13,   20,
       21,   24,   20,   24,   21,   21,   21,   21,   99,   84,
       88,  109,   97,    3,   14,    7,   21,   24,   21,   21,
       21,   21,   99,   84,   88,  109,   92,   97,  171,  179,
       21,   21,   21,   21,   21,   99,   84,   88,  109,   97,
      150,  170,  168,  178,   21,   21,   21,   21,   99,  101,
      126,   82,   84,   86,   88,   90,  114,  118,  122,  108,
      109,   68,   72,   76,   94,   97,   98,  132,  135,  142,
      143,  149,  152,  128,  162,  172,  173,  176,  187,  191,
      194,  200,  204,  207,  147,   52,  211,  214,  216,   56,

       17,   12,    9,    8,   21,   19,   21,    5,   21,  180,
       11,   10,   21,   21,   21,   21,  183,   18,   21,   18,
       21,  184,  181,   18,   21,  184,  182,   46
    } ;

static yyconst flex_int16_t yy_accept[1208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    6,    7,    7,
        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   17,   19,   21,   23,   25,   27,   29,   32,   34,

       36,   39,   41,   43,   45,   47,   49,   51,   53,   56,
       58,   60,   62,   64,   66,   69,   71,   73,   74,   76,
       78,   80,   82,   85,   87,   89,   91,   93,   95,   97,
       99,  102,  104,  106,  108,  110,  112,  115,  117,  119,
      121,  123,  125,  128,  131,  133,  136,  139,  141,  143,
      145,  147,  149,  151,  153,  155,  157,  159,  162,  164,
      166,  168,  170,  172,  174,  176,  178,  180,  182,  184,
      186,  189,  191,  193,  195,  197,  200,  204,  206,  208,
      210,  213,  215,  217,  219,  221,  223,  225,  227,  230,
      232,  234,  236,  238,  240,  243,  245,  247,  249,  252,

      254,  256,  258,  260,  262,  264,  267,  269,  272,  274,
      277,  279,  281,  283,  285,  286,  288,  290,  292,  294,
      296,  299,  301,  303,  305,  307,  309,  311,  313,  315,
      317,  319,  321,  323,  326,  329,  331,  333,  336,  338,
      340,  343,  345,  347,  349,  351,  354,  356,  358,  360,
      362,  364,  366,  368,  370,  372,  375,  377,  380,  382,
      385,  388,  390,  392,  394,  396,  398,  400,  402,  404,
      407,  409,  411,  413,  415,  418,  420,  423,  425,  427,
      429,  431,  433,  436,  438,  441,  443,  445,  447,  450,
      452,  454,  456,  458,  460,  462,  464,  467,  469,  472,

      474,  476,  478,  481,  483,  485,  488,  490,  493,  495,
      497,  497,  497,  497,  498,  498,  498,  499,  499,  499,
      499,  499,  499,  500,  501,  502,  502,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  504,  504,  505,  506,  507,  508,  509,  510,  511,
      513,  514,  514,  515,  516,  517,  518,  519,  520,  520,
      520,  520,  520,  520,  520,  521,  522,  523,  523,  524,
      524,  524,  524,  524,  524,  525,  526,  526,  526,  526,
      527,  528,  528,  529,  530,  530,  531,  531,  531,  532,
      532,  532,  532,  532,  532,  533,  533,  533,  534,  534,

      534,  535,  535,  535,  535,  536,  536,  537,  538,  538,
      538,  538,  539,  540,  540,  541,  542,  542,  543,  544,
      545,  545,  545,  546,  546,  547,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      549,  549,  550,  550,  550,  551,  551,  553,  553,  553,
      554,  554,  555,  555,  555,  556,  557,  557,  557,  557,
      558,  559,  561,  561,  562,  564,  565,  565,  565,  566,
      566,  567,  567,  568,  568,  568,  568,  568,  568,  569,
      569,  569,  570,  570,  571,  571,  571,  571,  572,  573,
      573,  574,  574,  575,  575,  576,  576,  576,  577,  577,

      578,  579,  580,  581,  582,  582,  583,  584,  585,  585,
      586,  587,  587,  588,  588,  589,  589,  589,  589,  589,
      590,  590,  591,  592,  593,  593,  593,  593,  594,  594,
      594,  595,  596,  596,  597,  597,  598,  599,  599,  599,
      600,  600,  600,  600,  601,  601,  601,  601,  601,  601,
      601,  602,  602,  603,  603,  604,  604,  605,  605,  606,
      606,  606,  607,  607,  608,  608,  609,  609,  609,  610,
      610,  611,  611,  611,  612,  612,  612,  613,  613,  614,
      614,  614,  615,  616,  616,  616,  617,  617,  617,  618,
      618,  619,  620,  620,  620,  621,  621,  621,  621,  621,

      622,  623,  624,  626,  627,  628,  630,  631,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  633,  634,  635,  636,
      637,  638,  638,  639,  640,  641,  641,  642,  643,  644,
      645,  646,  647,  647,  647,  647,  647,  648,  649,  649,
      650,  651,  651,  652,  652,  652,  652,  652,  652,  653,
      654,  654,  655,  656,  656,  657,  657,  658,  658,  658,
      658,  658,  658,  658,  659,  659,  660,  661,  662,  663,
      664,  664,  664,  665,  665,  666,  666,  666,  666,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  669,
      670,  671,  671,  671,  672,  672,  673,  673,  674,  674,
      674,  675,  675,  675,  675,  676,  676,  676,  676,  676,
      677,  678,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  680,  681,  682,
      683,  683,  684,  685,  685,  685,  686,  686,  687,  688,
      689,  689,  689,  689,  690,  690,  690,  691,  691,  691,
      692,  693,  693,  694,  695,  695,  695,  695,  696,  696,
      697,  698,  699,  699,  699,  700,  700,  700,  700,  701,

      701,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  703,  703,  703,  703,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  705,
      705,  705,  705,  706,  706,  706,  706,  706,  707,  707,
      707,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      710,  710,  710,  710,  711,  712,  713,  715,  716,  717,
      718,  719,  719,  720,  720,  720,  721,  722,  722,  722,
      722,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,

      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      725,  725,  726,  726,  726,  726,  726,  726,  727,  727,
      727,  727,  727,  728,  729,  730,  731,  732,  733,  734,
      734,  734,  735,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  738,  738,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  742,
      743,  744,  745,  746,  747,  747,  747,  748,  749,  749,
      749,  749,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  753,  754,
      754,  754,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  756,  757,  758,
      759,  761,  762,  763,  765,  767,  768,  769,  770,  772,
      773,  774,  775,  776,  778,  779,  780,  781,  782,  782,

      783,  783,  783,  783,  783,  783,  783,  783,  784,  785,
      786,  787,  788,  788,  788,  788,  788,  788,  789,  790,
      791,  792,  793,  794,  795,  796,  797,  798,  799,  800,
      801,  802,  802,  802,  802,  803,  804,  805,  806,  807,
      808,  809,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  811,  811,  811,  812,  813,  813,  813,
      814,  814,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  816,  816,  817,  817,  817,
      817,  817,  817,  817,  818,  818,  818,  820,  820,  822,
      822,  822,  823,  824,  824,  826,  826,  826,  827,  827,

      827,  827,  827,  827,  828,  829,  829
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   33,   33,   37,   38,   39,   40,   41,
       33,   42,   33,   43,   44,   45,   33,   33,   33,   33,
       46,   47,   48,    1,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   33,   59,   60,   61,   62,
       63,   64,   33,   65,   66,   67,   68,   69,   70,   71,
       72,   33,   73,   74,   75,   76,    1,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78
    } ;

static yyconst flex_int32_t yy_meta[79] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,    1,   26,   27,   28,   25,
       25,   25,   25,   25,   25,   25,   25,   29,   25,   25,
       25,   30,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   31,   32,   33,   34,   35,   35
    } ;

static yyconst flex_int16_t yy_base[1457] =
    {   0,
        0,    0,    0,   77,  151,  227, 5577, 5574,  303,    0,
      381,    0,  459,  535,  611,  687,  763,    0,  841,    0,
       77,   78,   80,   83,  919,  995, 1071,    0, 1149,    0,
     1227,    0, 1305,    0, 1383,    0,   90,   93, 1461,    0,
       94,   99, 1539,    0,  112,  126,  175,  176,   85,   98,
     1617, 1695,  145,  202,  115,  188,  211,  215,  102,  119,
     1773,    0,  244,  251,  135,  136, 1851,    0, 1929,    0,
      141,  241,  245,  252, 2007,    0,  464,  471,  473,  476,
     2085, 2161,  140,  214,  197,  257,  552,  554, 5575,10865,
    10865,  499,  519, 5567, 5564, 5545,  259,  481, 2232, 2293,

      570, 2362,  623, 5494, 2437,  101,  107,  644,  712,  262,
      646,10865,10865, 5562,  496,  549,  968, 5565,10865,10865,
    10865,    0,   93,  507,10865,  719,  945,  951, 1648, 5544,
     1021,  677,  651,10865,10865, 5559,  551,  655, 5540, 1710,
    10865,10865, 2511,  965, 1015, 2095,10865, 2192, 1644, 1656,
     2120, 2243, 5535, 1732,  741,10865,10865,    0, 1632,10865,
    10865, 5550, 1667,10865,10865, 5549, 1681,10865,10865, 5545,
      959, 1012, 2134,10865,    0,10865,  511,10865,10865,    0,
     1044, 2142,10865, 1743, 2198, 2251, 2319, 5528, 2226, 2221,
      749,10865,10865,    0, 5531, 2276,10865,10865, 5530, 2289,

        0,10865, 2303,10865,10865,    0, 5498,  559,10865, 5499,
     2353, 2586,10865,    0, 5495,10865,  206,10865, 5536, 5492,
        0,10865,10865, 5521, 5525, 5484,  147,10865,10865, 2309,
    10865,  285,10865,10865,  490, 2327,10865,  956,10865, 5488,
        0,10865,10865,  223,  526,    0,10865,10865,  997, 2277,
    10865,10865, 2348,10865,10865,    0, 2352,    0,10865,10865,
    10865,10865, 2391,10865,10865, 2400,10865,10865,    0,  468,
     5483,10865,10865,    0,  507, 5476,    0,10865, 5469, 5468,
    10865,10865,    0, 5469,    0,10865, 5497, 5463,    0,10865,
    10865, 5430,  136,10865,10865,    0, 5486, 5454,    0,10865,

     5453,    0,    0,10865,10865,    0,10865,10865, 5451, 5451,
     2185, 2655, 2146, 2217, 5415, 5453,10865,    0, 5436, 5431,
        0,  291,  268,10865,10865, 2731, 5430,  584,  248,  691,
     1699,  568,  529,  432,  492, 2420,  156,  602, 5399, 5381,
    10865, 5431,   34, 2808, 5385,  622, 5378,10865,10865,    0,
     2451, 2459, 2334, 2383, 2491, 2493, 2499, 5362, 2883,  702,
     2486, 1055, 1655, 2505,  714, 2546, 2575, 1749,10865,  925,
     2392, 2550, 2598, 5431,10865, 2088,  917, 2195, 1762,10865,
     2552, 5434,10865,  624, 5426,  647, 5411, 2114,10865, 5340,
     2604, 2614, 5373, 2636, 2653, 2540, 2683, 2693, 2429, 2125,

    10865, 5335, 2665, 2720, 5370, 5386,10865, 2628, 1009, 2742,
     2418,10865, 2751, 5382,  724, 2957, 3033, 5381,10865, 2765,
     2131, 2768, 5378, 2487,10865, 2778, 2818, 2840, 5361, 2848,
     2857, 2825, 2909, 2917,    0, 2942, 2887, 2934,  736,    0,
     2623,10865, 5323, 5375,10865, 2702,10865, 5317, 5368,10865,
     2731,10865, 5314, 5362,10865, 2745, 2337, 2748, 2797,10865,
     2855, 2445, 2545,10865, 2588, 2986, 2994,    0, 3062, 5339,
     3090, 2862,10865, 5301, 3018, 3112, 5337, 3120, 3073, 2946,
     3137, 3129, 2874,10865, 5299, 3009, 3154,    0, 5337, 5345,
     5334, 2923,10865, 5291, 5332, 5289, 3022,10865, 5284,    0,

     3058,10865, 5283,    0, 5282,  619,10865, 5294, 5291,10865,
     5327, 3067,10865, 5275,    0, 5267,  974, 5319, 5311,10865,
     5257,    0,10865,10865, 5253, 5253, 3084,10865, 5252, 2238,
    10865, 2275, 3095,10865, 5249, 3146,10865, 5259, 5246,    0,
      159, 5246, 5234,    0, 5231, 5231, 5234,  118, 5223, 3099,
    10865, 5222,    0, 3159,10865, 5221,    0, 3163,10865, 5180,
     3167,10865, 5179,  658, 5229,  916, 5214, 5173,  923, 5220,
      939, 5205, 5167,    0, 5212,  661,    0, 5155,    0,  658,
     5120,    0,    0, 5115, 1638, 5152,    0, 5106,    0, 5103,
        0,    0, 5096, 5130, 5099, 5086, 5122,    0, 5121, 1680,

     5107,10865,10865, 5103, 3213, 5098, 5103,10865, 5101, 5083,
      633, 5057, 5042,  988, 1616, 1707,  906, 2648, 2100, 2689,
    10865, 1675, 2150, 2176, 5048, 5040, 5077, 1721, 3169,    0,
     2187, 5012, 3180,10865,10865, 3291, 2929,    0,    0, 2835,
     3196, 3197, 3174, 2281, 3185, 3249,10865, 3309, 3317, 2311,
     2876, 3171, 3227,    0, 5023, 3253, 3325, 5017, 5046, 3323,
     3325, 3334, 1029, 3392, 3402, 3405, 3425, 5054, 2972, 3014,
     5008, 5007, 5006, 3337, 3340, 3356, 3453, 3475, 3483, 3491,
     5001, 4999,    0,    0, 5038, 4993, 4982, 4990, 4986, 4985,
        0,    0, 4950, 4001, 4000, 4004, 3997, 3994, 3993, 3991,

     3979, 3985, 3974, 3977, 3980, 2344, 3967, 3979, 3976, 3968,
     3955, 3953, 3952, 3950,    0, 3947,    0, 3943,10865,10865,
    10865, 3942, 3968, 2413, 3933,    0, 3926,10865, 2108,    0,
     3960, 3919, 3906, 3902,10865, 2390, 3898, 3942,    0, 3250,
     2422,10865, 3914, 2239, 3883, 3882, 1689, 2190, 2313, 3906,
     3048, 2354, 3148, 2222, 3876, 3863,10865, 2439,10865,    0,
     3847, 2492, 3206, 3832, 3514, 2563, 3858, 3497, 3424, 3278,
     3532, 3540, 3548, 3549, 3829, 3505,10865, 3574, 3828, 3562,
     3624, 3700, 3594,10865, 3827, 3826, 3822, 3597,    0, 3658,
     3729, 3680, 3817, 3808, 3850, 3804, 3801, 3796, 3794, 3789,

        0, 3787, 3770, 3769, 3701, 3763, 3754, 3750, 3742, 3743,
     3731,10865, 3725, 3725, 3722,10865, 3708, 3718, 3700, 3693,
     3681, 3673, 3667, 3666, 3659, 3646, 3632, 3631, 2629, 3628,
     3626, 2326, 3659, 3614, 3613, 3612, 3606,10865, 3646, 3418,
    10865, 3630, 3632, 3595, 3574, 2417, 2433, 3179, 3271,10865,
     2451, 3567, 3577, 2676, 3380, 3548, 3417, 3459, 3592, 3649,
     3734, 3581, 3737, 3564, 3541, 3759, 3776, 3539, 3528, 3520,
     3767, 3806, 3519, 3515, 3512, 3504, 3504, 3502, 3500, 3498,
     3494, 3493, 3483, 3473, 3452, 3451, 1588, 3424, 3428, 2646,
     3420, 3416, 3415, 3409, 3406, 3401, 3399, 3384, 3393,  204,

     3379, 3385, 3379,  463, 3380, 3359, 3353, 3341, 3336, 3335,
     3334, 3332, 3324, 3322, 2439, 3319, 3317, 3308, 3307, 3336,
     3306,10865, 3282, 3285, 2225, 2333, 3375,10865, 3308, 3598,
     3272, 3248, 3690,10865, 3600, 3791, 3798, 3800, 3799, 3258,
     3256, 3801, 3836, 3243, 3231, 3224, 3816, 3872, 3894, 3220,
     3196, 3190,10865, 3184, 3183, 3165, 3159, 3149, 3136, 3133,
     2088, 3114, 3100, 3092, 3093, 3089, 3077, 3071, 3075, 3067,
     3075, 3069, 3068, 3067,10865, 3050,    0,    0, 3052,10865,
     3023, 2713, 3023, 3011, 3016, 3011, 3004, 3003, 2997, 2993,
     2978, 2977, 2964, 2959, 2950, 2949, 2942, 2941, 2936, 2935,

     2951, 2919, 2907, 2492, 2943, 3715, 2886, 2870, 3725, 3664,
     3835, 3831, 3839, 3883, 2876, 2868, 3900, 3902, 2852, 2844,
     2842, 3910, 2838, 2822, 2821, 2807, 2805, 2803, 2791, 2789,
     2783, 2793, 2795,    0, 2779, 2777, 2763, 2761,10865, 2763,
     2734, 2719, 2716, 2715, 2697, 2688,    0,10865,10865, 2687,
     2697,10865, 2677, 2664, 2653, 2647, 2634, 2628, 2624, 2619,
     2618, 2596, 2595, 2587, 2583, 2579, 2578, 2577, 2564, 2549,
     2559, 2535, 2511, 3739, 2557, 2556, 3867, 3932, 3908, 3933,
     3668,10865,10865, 3923, 3943,10865,10865,10865, 3940,10865,
    10865,10865,10865,    0,10865,10865,10865,10865, 2513,10865,

     2511, 2485, 2479, 2471, 2482, 2471, 2457,10865,10865,10865,
    10865,10865, 2449, 2442, 2771, 2441, 2372,10865,10865,10865,
    10865,10865,10865,10865,10865,10865,10865,10865,10865,10865,
    10865, 2383, 2367, 3740,10865,10865,10865, 3934, 1667, 3605,
     2342, 3967, 2327, 2312, 2271, 2255, 2249, 2240, 2198, 2165,
     2144, 2141,10865, 2083, 2089,10865,10865, 2096, 3855, 3969,
       76, 3971, 2046, 1703, 1696, 1653, 1608, 1610, 1576,  978,
      987, 2951,  954,  943, 3977, 2661, 3981,  926,  913,  920,
      647,  607,  572,10865, 3178,  537, 3983, 2420, 3987,  531,
      492, 3190,10865,  426, 3207,  693,  420, 3279,  109,  556,

       63, 3319, 2318,10865, 3992,10865, 4060, 4095, 4130, 4165,
     4200, 4235, 4270, 4305, 4340, 4375, 4410, 4445, 4480, 4515,
     4550, 4585, 4620, 4655, 4690, 4725, 4760, 4795, 4830, 4865,
     4900, 4935, 4970, 5005, 5033, 5055, 5074, 5098, 5119, 5143,
     5177, 5206, 5241, 3974, 5260, 5294, 5328, 5362, 5397, 5426,
     5461, 5491, 5525, 5559, 5593, 5613, 5648, 5683, 5718, 5747,
     3987, 5781, 3995, 5815, 5849, 5883, 5917, 4018, 5936, 5956,
     5991, 6011, 6046, 6081, 6101, 6136, 6171, 6205, 6235, 6270,
     6290, 6325, 5017, 6344, 5025, 6363, 6398, 6418, 6453, 6488,
     6508, 6530, 6565, 6600, 6635, 6664, 6698, 5275, 6715, 6737,

     6752, 6782, 5048, 5309, 6804, 6833, 6864, 6893, 6922, 6957,
     6976, 7004, 7038, 7072, 7106, 7141, 7158, 7193, 7222, 7251,
     7286, 7321, 7351, 7380, 7414, 7448, 7482, 7517, 7551, 7571,
     7606, 7641, 7676, 7705, 7734, 7768, 7802, 5343, 7836, 7870,
     7904, 7938, 7955, 7974, 8002, 8022, 8057, 8077, 8112, 8147,
     8175, 8195, 8230, 8265, 8299, 8329, 8364, 8384, 8419, 8438,
     8466, 8485, 8513, 8548, 8568, 8603, 8638, 5262, 8668, 8690,
     8710, 8745, 8780, 8815, 8832, 8867, 8887, 8904, 8934, 8969,
     9003, 5067, 9029, 9061, 9092, 5506, 5087, 9126, 9151, 9180,
     5351, 9215, 9232, 9261, 9290, 9325, 9355, 9385, 9420, 9454,

     9483, 9512, 9546, 9580, 9614, 9631, 5574, 9650, 9685, 5582,
     9702, 9737, 5605, 5759, 5291, 9767, 9787, 9809, 9844, 9864,
     9883, 9913, 5112, 9944, 9976,10007,10042, 5132,10076,10106,
    10132,10167,10196,10231,10261,10290, 5773,10324,10358,10377,
    10412,10429,10459,10481,10501,10520,10550,10584,10619,10654,
    10689,10724,10759,10794,10829, 5189
    } ;

static yyconst flex_int16_t yy_def[1457] =
    {   0,
     1207, 1207, 1206,    3, 1208, 1208, 1209, 1209, 1206,    9,
     1206,   11, 1210, 1210, 1211, 1211, 1206,   17, 1206,   19,
     1212, 1212, 1213, 1213, 1214, 1214, 1206,   27, 1206,   29,
     1206,   31, 1206,   33, 1206,   35, 1215, 1215, 1206,   39,
     1216, 1216, 1206,   43, 1217, 1217, 1218, 1218, 1219, 1219,
     1220, 1220, 1221, 1221, 1222, 1222, 1223, 1223, 1224, 1224,
     1206,   61, 1225, 1225, 1226, 1226, 1206,   67, 1206,   69,
     1227, 1227, 1227, 1227, 1206,   75, 1228, 1228, 1229, 1229,
     1230, 1230, 1231, 1231, 1232, 1232, 1233, 1233, 1206, 1206,
     1206, 1206, 1206, 1234, 1235, 1236, 1236, 1237, 1206, 1238,

     1239, 1240, 1239, 1206, 1206, 1206, 1236, 1236, 1237, 1236,
     1206, 1206, 1206, 1241, 1242, 1242, 1242, 1243, 1206, 1206,
     1206, 1244, 1245, 1206, 1206, 1206, 1206, 1246, 1246, 1206,
     1247, 1206, 1248, 1206, 1206, 1249, 1250, 1250, 1206, 1250,
     1206, 1206, 1251, 1252, 1252, 1252, 1206, 1252, 1206, 1206,
     1253, 1253, 1206, 1254, 1255, 1206, 1206, 1256, 1206, 1206,
     1206, 1257, 1206, 1206, 1206, 1258, 1206, 1206, 1206, 1259,
     1260, 1260, 1260, 1206, 1261, 1206, 1262, 1206, 1206, 1263,
     1264, 1206, 1206, 1206, 1206, 1265, 1265, 1206, 1266, 1206,
     1267, 1206, 1206, 1268, 1269, 1206, 1206, 1206, 1270, 1206,

     1271, 1206, 1271, 1206, 1206, 1272, 1206, 1273, 1206, 1274,
     1206, 1206, 1206, 1275, 1206, 1206, 1206, 1206, 1276, 1206,
     1277, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1278, 1206, 1206, 1278, 1206, 1206, 1206, 1206, 1206,
     1279, 1206, 1206, 1206, 1206, 1280, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1281, 1206, 1282, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1283, 1284,
     1206, 1206, 1206, 1285, 1286, 1206, 1287, 1206, 1206, 1206,
     1206, 1206, 1288, 1206, 1289, 1206, 1206, 1206, 1290, 1206,
     1206, 1206, 1206, 1206, 1206, 1291, 1292, 1206, 1293, 1206,

     1206, 1294, 1294, 1206, 1206, 1295, 1206, 1206, 1206, 1206,
     1206, 1296, 1206, 1206, 1206, 1297, 1206, 1298, 1299, 1300,
     1301, 1206, 1300, 1206, 1206, 1302, 1300, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1303, 1296,  344,  344,  344, 1206, 1206, 1304,
     1305, 1305, 1306, 1306, 1306, 1306, 1306, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1300, 1206, 1206, 1300,
     1300, 1206, 1206, 1307, 1206, 1308, 1309, 1308, 1206, 1206,
     1308, 1310, 1206, 1311, 1312, 1311, 1206, 1206, 1206, 1206,
     1206, 1313, 1206, 1313, 1314, 1315, 1313, 1314, 1316, 1206,

     1206, 1206, 1315, 1315, 1317, 1318, 1206, 1319, 1320, 1319,
     1206, 1206, 1319, 1321, 1321, 1322, 1322, 1321, 1206, 1323,
     1324, 1323, 1321, 1206, 1206, 1323, 1206, 1325, 1206, 1325,
     1326, 1327, 1325, 1206, 1328, 1326, 1327, 1327, 1329, 1330,
     1206, 1206, 1206, 1331, 1206, 1206, 1206, 1206, 1332, 1206,
     1206, 1206, 1206, 1333, 1206, 1334, 1335, 1334, 1206, 1206,
     1334, 1336, 1206, 1206, 1336, 1337, 1206, 1338, 1337, 1206,
     1339, 1206, 1206, 1206, 1206, 1340, 1206, 1340, 1341, 1342,
     1340, 1341, 1206, 1206, 1206, 1342, 1342, 1343, 1344, 1345,
     1344, 1206, 1206, 1206, 1346, 1206, 1206, 1206, 1206, 1347,

     1347, 1206, 1347, 1348, 1206, 1349, 1206, 1350, 1206, 1206,
     1351, 1206, 1206, 1206, 1352, 1206, 1206, 1353, 1353, 1206,
     1206, 1354, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1355,
     1206, 1355, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1356,
     1206, 1206, 1206, 1357, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1358, 1206, 1206, 1206, 1359, 1206, 1206, 1206,
     1206, 1206, 1206, 1360, 1361, 1360, 1206, 1206, 1362, 1363,
     1362, 1206, 1206, 1364, 1206, 1206, 1365, 1206, 1366, 1206,
     1206, 1367, 1368, 1206, 1369, 1370, 1371, 1206, 1372, 1206,
     1373, 1374, 1206, 1206, 1206, 1206, 1375, 1376, 1377, 1206,

     1378, 1206, 1206, 1378, 1379, 1378, 1377, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1380,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1381, 1381, 1382,
     1206, 1383, 1384, 1206, 1206, 1385, 1384, 1386, 1387, 1388,
     1388, 1388, 1206, 1206, 1206, 1206, 1206, 1378, 1206, 1206,
     1389, 1389, 1390, 1391, 1206, 1392, 1392, 1206, 1393, 1394,
     1394, 1395, 1206, 1396, 1397, 1397, 1398, 1399, 1206, 1400,
     1206, 1206, 1206, 1401, 1401, 1402, 1403, 1404, 1405, 1405,
     1206, 1206, 1406, 1407, 1408, 1206, 1206, 1206, 1409, 1206,
     1410, 1411, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1412, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1413, 1206, 1414, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1415, 1206, 1206, 1416, 1417,
     1418, 1206, 1206, 1206, 1206, 1206, 1206, 1419, 1420, 1421,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1422,
     1422, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1423,
     1424, 1206, 1425, 1426, 1427, 1425, 1428, 1429, 1429, 1429,
     1206, 1206, 1430, 1431, 1206, 1432, 1206, 1432, 1206, 1433,
     1434, 1434, 1435, 1206, 1206, 1206, 1206, 1436, 1437, 1438,
     1438, 1439, 1206, 1206, 1440, 1206, 1206, 1206, 1441, 1206,

     1442, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1443, 1444, 1206, 1206, 1206, 1206, 1206, 1445, 1446,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1447, 1206,
     1206, 1206, 1206, 1206, 1425, 1206, 1206, 1425, 1429, 1429,
     1429, 1206, 1431, 1206, 1206, 1433, 1435, 1206, 1206, 1206,
     1436, 1448, 1206, 1206, 1206, 1206, 1206, 1441, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1449, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1443, 1206, 1206, 1206, 1206, 1445,
     1206, 1206, 1206, 1206, 1206, 1206, 1450, 1206, 1447, 1447,
     1206, 1206, 1425, 1206, 1425, 1429, 1429, 1429, 1431, 1206,
     1206, 1433, 1435, 1206, 1206, 1206, 1436, 1448, 1448, 1206,
     1206, 1206, 1206, 1206, 1441, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1451, 1452, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1450, 1450, 1206, 1206, 1425, 1425,
     1429, 1429, 1429, 1431, 1206, 1206, 1433, 1435, 1206, 1206,
     1206, 1436, 1206, 1206, 1206, 1206, 1441, 1206, 1206, 1206,
     1206, 1206, 1206, 1453, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1454, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1425, 1206, 1429, 1429,
     1431, 1206, 1206, 1433, 1435, 1206, 1206, 1206, 1436, 1206,
     1206, 1206, 1206, 1441, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1455, 1206, 1206, 1206, 1425, 1206, 1206,
     1456, 1429, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1455, 1455, 1425,
     1456, 1429, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1425, 1456, 1429, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1425, 1456, 1429, 1206,
     1206, 1206, 1206, 1206, 1206, 1456, 1206, 1206, 1206, 1456,

     1206, 1206, 1456, 1206, 1456,    0, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206
    } ;

static yyconst flex_int16_t yy_nxt[10944] =
    {   0,
       91,   92,   93,   91,   92,   91,   94,   91,   95,   91,
       91,   91,   91,   91,   96,   91,   97,   98,   91,   96,
       96,   96,   91,   99,   91,   91,  100,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   91,  102,   91,  103,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,   91,   91,   91,   91,   91,  104,  105,  161,
      161,  105,  165,  162,  162,  165,  166,  229,  629,  166,
      106,  107,  202,  108,  109,  202,  209,  110,  110,  111,

      229,  209,  365,   90,  252,  365,   90,  210,  365,  630,
      385,  365,  210,  217,  218,  387,  217,  242,  219,  243,
      211,  252,  639,  163,  163,  211,  167,  217,  218,  167,
      217,  230,  219,  321, 1034, 1176,  203,  265,  265,  203,
      212,  244,  300,  278,  230,  212,  238,  239,  253,  238,
      111,  112,  112,  113,  112,  112,  112,  114,  220,  112,
      112,  245,  112,  112,  112,  253,  112,  279,  112,  116,
     1202,  708,  220,  116,  112,  112,  112,  222,  222,  223,
      223,  266,  266,  624,  584,  709,  301,  279,  224,  224,
      242,  240,  243,  225,  225,  526,  112,  117,  112,  303,

      525,  226,  226,  238,  239,  624,  238,  517,  304,  305,
      517,  583,  518,  247,  244,  248,  300,  247,  701,  248,
      702,  227,  227,  112,  112,  112,  112,  112,  112,  113,
      112,  112,  112,  114,  245,  112,  112,  249,  112,  112,
      112,  249,  112,  278,  112,  116,  259,  278,  240,  116,
      112,  112,  112,  259,  278,  260,  261,  250,  980,  303,
      301,  250,  260,  261,  609,  981,  322,  279,  304,  305,
      262,  280,  112,  117,  112,  323,  541,  262,  280,  370,
      542,  371,  371,  371,  601,  321,  530,  279,  321,  530,
      263,  280,  600,  610,  321,  600,  531,  263,  280,  112,

      112,  112,  112,  120,  120,  121,  120,  120,  120,  120,
      120,  122,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  120,  124,
      120,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  120,  120,  120,  120,  123,
      123,  125,  126,  127,  126,  126,  125,  125,  125,  128,
      125,  125,  125,  125,  125,  125,  125,  125,  129,  125,

      125,  125,  125,  130,  125,  125,  125,  125,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  125,  132,  125,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  125,  125,  125,  133,  131,  131,  134,
      134,  135,  134,  134,  134,  136,  286,  134,  134,  619,
      134,  134,  134,  286,  134,  290,  134,  138,  290, 1201,
      287,  138,  139,  134,  134,  565,  291,  287, 1199,  291,
      567, 1206,  619,  324, 1206,  320,  325,  320,  326,  292,

      311, 1206,  292,  311,  134,  140,  134,  321,  388,  389,
      288,  388,  463,  377,  378,  463,  985,  288,  378,  293,
      313,  314,  293,  313,  570,  312,  464,  328,  618,  572,
      986,  134,  134,  134,  134,  134,  134,  135,  134,  134,
      134,  136,  378,  134,  134,  312,  134,  134,  134,  618,
      134,  618,  134,  138,  307,  390,  307,  138,  139,  134,
      134,  507,  308, 1034,  308,  315, 1206,  378,  409,  410,
      618,  378,  508,  410,  543,  308,  308,  308,  308,  541,
      134,  140,  134,  542,  320,  608,  320,  320,  608,  320,
      320,  320, 1197,  618, 1194,  378,  321,  410,  309,  310,

      309,  310,  639,  617,  618,  509, 1203,  134,  134,  134,
      134,  141,  141,  142,  141,  141,  141,  143,  352,  141,
      141,  507,  141,  141,  141,  617,  141,  618,  141,  145,
      634, 1192,  508,  145,  146,  147,  141,  320,  618,  320,
      320,  385,  320,  320,  320,  366,  387,  372,  366,  321,
      372,  322,  403,  403,  403,  403,  141,  148,  141,  404,
      367,  618,  373,  723,  385,  509,  364,  635,  364,  387,
      321,  352, 1206,  410,  744,  565, 1034,  410,  400,  401,
      567,  400,  724,  141,  141,  141,  141,  141,  141,  142,
      141,  141,  141,  143,  636,  141,  141,  744,  141,  141,

      141,  410,  141,  365,  141,  145,  365, 1034,  720,  145,
      146,  147,  141,  368,  369,  365,  368,  364,  365,  364,
      391,  391,  391,  391,  324,  402,  320,  325,  320,  326,
      663,  611,  141,  148,  141,  721,  392,  669,  321,  639,
      669,  393,  437,  437,  437,  437, 1200,  435,  418,  438,
      486,  486,  486,  486,  611,  612,  613,  487,  328,  141,
      141,  141,  141,  125,  149,  150,  149,  149,  125,  125,
      125,  151,  125,  125,  125,  125,  125,  125,  125,  125,
      152,  125,  125,  125,  125,  153,  125,  125,  125,  125,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  125,  132,
      125,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  125,  125,  125,  155,  154,
      154,  156,  156,  157,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  156,  159,  156,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  156,  156,  156,  156,  158,  158,  168,
      168,  169,  168,  168,  168,  170,  650,  168,  168,  650,
      168,  168,  168,  565,  168,  652,  168,  172,  567,  652,
      570,  172,  168,  168,  168,  572,  391,  391,  391,  391,
      618,  321,  391,  391,  391,  391,  570,  536,  537,  394,
      536,  572,  392,  652,  168,  173,  168,  393,  392,  379,
      380,  419,  379,  393,  618,  517,  457,  458,  517, 1191,
      518,  458,  421,  422, 1034, 1206,  378,  422, 1190,  419,
      378,  168,  168,  168,  168,  168,  168,  169,  168,  168,

      168,  170,  538,  168,  168,  458,  168,  168,  168, 1186,
      168,  422,  168,  172,  378, 1185,  381,  172,  168,  168,
      168, 1206,  391,  391,  391,  391,  396,  661,  747, 1206,
      458,  661, 1206,  422,  458,  419, 1183,  422,  392, 1206,
      168,  173,  168,  393,  399,  467,  467,  467,  467, 1034,
      545,  747,  468,  419,  546,  661,  368,  369,  458,  368,
      547,  422,  548,  469,  469,  469,  470,  168,  168,  168,
      168,  174,  174,   90,  174,  174,  174,  174,  174,  175,
      174,  174,  174,  174,  174,  174,  176,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  174,  174,  174,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  174,  174,  174,  174,  177,  177,  178,
      178,  179,  178,  178,  178,  178,  178,  180,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  178,  182,  178,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  178,  178,  178,  178,  181,  181,  183,  184,  185,
      184,  184,  183,  183,  183,  186,  183,  183,  183,  183,
      183,  183,  183,  183,  187,  183,  183,  183,  183,  188,
      183,  183,  183,  183,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  183,  190,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  183,

      183,  183,  191,  189,  189,  192,  192,  193,  192,  192,
      192,  192,  192,  194,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      192,  196,  192,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  192,  192,  192,
      192,  195,  195,  197,  197,  198,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  197,  200,
      197,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  197,  197,  197,  197,  199,
      199,  204,  204,  205,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  204,  207,  204,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  204,  204,  204,  204,  206,  206,   90,
       90,  213,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,   90,  215,   90,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,   90,   90,   90,   90,  214,  214,  231,  232,  233,
      231,  232,  231,  231,  231,  231,  231,  231,  234,  231,
      231,  231,  231,  441,  442,  231,  441,  964, 1182,  231,
      231,  231,  231,  231,  728,  427,  427,  427,  427,  397,
      397,  397,  397,  965,  748,  730,  394,  427,  427,  427,
      427,  428,  231,  236,  231,  392,  429, 1181,  446,  447,
      393,  446,  644,  428,  645,  645,  645,  748,  429, 1034,
      443,  600,  451,  452,  600,  451, 1139, 1139, 1139,  231,
      231,  231,  231,  231,  231,  231,  232,  233,  231,  232,

      231,  231,  231,  231,  231,  231,  234,  231,  231,  231,
      231,  411,  412,  231,  411,  448,  752,  231,  231,  231,
      231,  231,  758,  396, 1034,  758,  614, 1206,  410,  453,
      615,  846,  410,  434,  427,  427,  434,  749,  616,  752,
      231,  236,  231,  435,  475,  475,  475,  475,  614,  428,
      368,  369,  615,  368,  429,  846,  410, 1180,  413,  749,
      476,  616, 1179,  379,  380,  477,  379,  231,  231,  231,
      231,  231,  231,  254,  254,  255,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  254,  257,
      254,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  254,  254,  254,  254,  256,
      256,  267,  267,  268,  267,  267,  267,  267,  267,  269,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  267,  271,  267,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  267,  267,  267,  267,  270,  270,  272,
      272,  273,  272,  272,  272,  272,  272,  274,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  272,  276,  272,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  272,  272,  272,  272,  275,  275,  281,  281,  282,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  281,  284,  281,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  281,
      281,  281,  281,  283,  283,  294,  294,  295,  294,  294,
      294,  296,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  423,  294,  294, 1178,  377,  378,  294,  294,  294,
      378,  294, 1206,  422,  728,  388,  389,  422,  388,  419,
     1135,  427,  427,  427,  427,  730,  400,  401,  430,  400,
      294,  298,  294,  618,  378,  459,  460,  428,  459, 1033,
     1174,  422,  429,  472,  473, 1173,  472,  313,  314,  666,
      313, 1206,  458,  666, 1034,  618,  458,  294,  294,  294,
      294,  294,  294,  295,  294,  294,  294,  296,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  666,  294,  294,
      458,  753,  461,  294,  294,  294,  311,  294,  631,  311,
      474,  631,  315,  424,  425,  432,  424, 1172, 1206,  475,

      475,  475,  475,  753,  754, 1171,  294,  298,  294, 1206,
      422,  312, 1206,  378,  422,  476, 1206,  378,  313,  314,
      477,  313,  483,  484, 1170,  483,  754,  475,  475,  475,
      475,  312,  847,  294,  294,  294,  294,  329,  422,  530,
      426,  378,  530,  476,  433,  433,  433,  433,  477,  531,
      330,  430,  475,  475,  475,  475,  847, 1169,  851,  478,
      428,  331,  332,  315, 1004,  429,  333,  334,  476,  485,
      843,  335,  336,  477,  337,  338, 1206,  492,  493, 1206,
      492,  851,  650,  331,  332,  650, 1206, 1004,  333,  334,
      497,  498,  843,  497,  335,  336,  339,  340,  337,  338,

      341,  341,  341,  341,  501,  502, 1168,  501, 1167,  342,
      527,  528,  650,  527, 1166,  650,  341,  341,  432,  343,
      481,  481,  481,  481,  494,  549,  480,  478,  533,  534,
      545,  533,  728, 1165,  546,  631,  476,  499,  631,  343,
      547,  477,  548,  730,  848,  816,  345,  346,  816,  550,
      551,  503,  550,  554,  555,  675,  554,  529,  347,  675,
      510,  510,  510,  510,  639,  348,  848,  349,  350,  341,
      341,  341,  341, 1164,  618,  535,  510,  510,  342,  511,
      639,  618, 1205,  675,  631,  341,  341,  631,  343, 1163,
     1161, 1157,  558,  559,  480,  558,  552,  618,  759,  511,

      556,  561,  562,  618,  561,  817,  632, 1156,  343,  370,
      354,  371,  371,  371,  829,  355,  356,  829,  321,  411,
      412,  620,  411,  841,  620, 1155,  841,  357,  510,  639,
      657,  657,  657,  657,  348,  759,  349,  350,  359,  560,
      758,  359,  640,  758,  621,  728,  463,  622,  563,  463,
      360,  360,  925,  361,  362,  632,  730,  363,  363,  364,
      464,  623,  759,  312,  926,  320,  639,  320,  320,  622,
      320,  320,  320,  320,  925,  320,  320,  321,  320,  320,
      320, 1196,  618,  312,  623,  321,  926,  366,  424,  425,
      366,  424,  631,  854,  631,  631,  854,  631, 1154,  352,

      631,  634,  643,  631,  618, 1152,  372,  352,  364,  372,
      364,  414,  414, 1151,  414,  414,  414,  415, 1150,  414,
      414,  373,  414,  414,  414, 1149,  414,  364,  414,  417,
     1074, 1148, 1147,  417,  414,  418,  414,  639,  635,  639,
     1146,  403,  403,  403,  403,  639,  463,  366,  404,  463,
      366,  372,  641, 1074,  372, 1145,  414,  417,  414,  364,
      464,  642,  373,  632,  631,  636,  373,  631,  364,  377,
      378,  632,  364, 1144,  378, 1143,  646,  647,  364,  646,
     1137, 1136, 1133,  414,  414,  414,  414,  512,  513,  463,
      512,  648,  463,  510,  510,  510,  510,  649,  378,  372,

     1132,  321,  372,  464, 1131,  391,  391,  391,  391,  510,
      510,  653,  511,  314,  643,  397,  397,  397,  397,  364,
      364,  392,  394,  364,  441,  442,  393,  441, 1130,  858,
      829,  392,  511,  829,  514,  632,  393, 1206, 1206, 1206,
     1206, 1129, 1128, 1127, 1206,  409,  410, 1126,  649,  620,
      410, 1125,  620, 1206,  391,  391,  391,  391, 1206, 1124,
     1123,  510,  341,  341,  341,  341,  403,  403,  403,  403,
      392,  364,  621,  404,  410,  393,  399,  854,  341,  341,
      854,  595, 1122, 1121,  397,  397,  397,  397, 1120,  396,
      751,  394, 1119,  751,  391,  391,  391,  391, 1118,  968,

      392,  595,  969,  446,  447,  393,  446,  639,  345,  346,
      392, 1206, 1117,  621, 1052,  393,  399, 1052, 1188, 1116,
      347, 1206, 1206, 1206, 1206, 1115, 1114,  348, 1206,  349,
      350,  602,  451,  452,  602,  451,  602,  602,  602,  602,
      602,  602,  602,  603,  602,  604,  602,  604,  605,  602,
     1113, 1112,  537,  602,  602,  602,  602,  607,  396, 1206,
      410, 1110,  457,  458,  410, 1206,  458,  458,  409,  410,
      458,  419, 1153,  410, 1206, 1153,  602,  602,  602, 1109,
     1108, 1107,  421,  422,  419, 1206,  422,  422,  410,  419,
      422,  458, 1206, 1106,  458,  421,  422,  410,  459,  460,

      422,  459,  419,  602,  602,  602,  602,  602,  602,  631,
      662,  422,  631, 1105,  422, 1206, 1206, 1206, 1206,  427,
      427,  427,  427, 1104,  422, 1103,  437,  437,  437,  437,
     1102, 1206, 1206,  438, 1206,  428,  631,  667, 1101,  631,
      429,  433,  433,  433,  433, 1099, 1034, 1098,  430, 1206,
     1206, 1206, 1206, 1097, 1206, 1096, 1206,  428,  434,  427,
      427,  434,  429,  472,  473, 1206,  472, 1095,  435, 1094,
     1206, 1093,  457,  458,  428,  483,  484,  458,  483,  429,
      632,  639, 1206, 1206,  359, 1092, 1091,  359,  437,  437,
      437,  437,  768,  377,  652,  438,  360,  360,  652,  361,

      362,  458, 1090,  363,  363,  364, 1088,  632, 1087,  312,
      433,  433,  433,  433,  676,  432, 1086,  430,  434,  427,
      427,  434,  652, 1206,  492,  493,  428,  492,  435,  312,
      631,  429, 1083,  631,  428, 1206, 1206, 1206, 1206,  429,
     1082, 1076, 1206,  434,  427,  427,  434,  486,  486,  486,
      486, 1075, 1184,  435,  487, 1184,  364,  414,  414,  428,
      414,  414,  414,  663,  429,  414,  414,  928,  414,  414,
      414, 1073,  414,  669,  664,  417,  669, 1072, 1071,  417,
      414,  418,  414,  435,  432, 1070, 1069,  467,  467,  467,
      467, 1068, 1067,  766,  468,  467,  467,  467,  467, 1066,

     1065,  632,  414,  417,  414,  469,  469,  469,  470, 1064,
      486,  486,  486,  486, 1063,  669,  470,  487,  669,  475,
      475,  475,  475,  497,  498,  435,  497, 1062, 1061,  414,
      414,  414,  414,  414,  414,  476,  414,  414,  414,  663,
      477,  414,  414, 1060,  414,  414,  414, 1059,  414,  751,
      414,  417,  751, 1058, 1057,  417,  414,  414,  414,  501,
      502, 1056,  501,  467,  467,  467,  467, 1055,  512,  513,
      468,  512,  621, 1054,  475,  475,  475,  475,  414,  417,
      414,  469,  469,  469,  470,  527,  528, 1053,  527, 1051,
      476,  467,  467,  467,  467,  477,  533,  534,  468,  533,

      550,  551, 1050,  550, 1047,  414,  414,  414,  414,  679,
      679,  679,  470,  481,  481,  481,  481, 1046, 1045, 1044,
      478, 1206, 1206, 1206, 1206, 1043, 1042, 1041, 1206,  476,
      475,  475,  475,  475,  477, 1040, 1039, 1206,  481,  481,
      481,  481, 1206, 1038, 1034,  478,  476,  536,  537,  849,
      536,  477,  849, 1037,  476, 1206, 1206, 1206, 1206,  477,
      554,  555, 1206,  554,  558,  559, 1036,  558,  561,  562,
      758,  561,  850,  758, 1035,  646,  647,  759,  646, 1193,
      927,  631, 1193,  927,  631, 1032, 1031,  480, 1206,  652,
      771, 1198,  538,  652, 1198, 1206,  649,  631,  631, 1030,

      631,  631,  644,  928,  645,  645,  645,  631, 1195, 1029,
      631, 1195,  480,  602,  759, 1028,  602,  652,  602,  602,
      602,  602,  602,  602,  602,  603,  602,  604,  602,  604,
      740,  602,  763, 1027, 1026,  602,  602,  602,  602,  607,
     1025,  759,  639,  639,  377,  378, 1024,  649,  769,  378,
      646,  647,  632,  646,  776,  776,  776,  776,  602,  741,
      602,  770,  324,  855,  320,  772,  320,  840,  632,  632,
     1023,  649,  930,  378, 1021,  930,  321,  777,  632,  631,
     1198, 1020,  631, 1198,  774,  602,  602,  602,  602,  602,
      602,  764,  764, 1019,  764,  850,  764,  764,  764,  764,

      764,  764,  764,  764,  764,  764, 1016,  764, 1015,  764,
      646,  647, 1008,  646,  764,  764,  764,  764,  646,  647,
     1204,  646,  649, 1204,  639,  773,  778,  778,  778,  778,
     1007,  649,  850,  772, 1003,  321,  764,  764,  764,  649,
      409,  661, 1206,  661,  861,  661, 1002,  661, 1001,  777,
      632,  409,  410,  739,  457,  675,  410, 1206,  675,  675,
     1000,  999,  675,  764,  764,  762,  764,  764,  764,  661,
      998,  661,  997,  457,  458,  996, 1006,  995,  458, 1006,
      410,  631,  649,  675,  631,  994,  675,  993,  992,  991,
      649,  780,  414,  414,  990,  414,  414,  414,  663,  928,

      414,  414,  458,  414,  414,  414,  989,  414,  419,  414,
      782, 1206,  988,  788,  782,  414,  414,  414,  854,  421,
      666,  854, 1206,  666,  666,  631,  419,  666,  631, 1206,
      324,  419,  320,  987,  320,  840,  984,  414,  782,  414,
      983,  933,  421,  422,  321,  982,  979,  422,  666,  419,
      978,  666,  632,  977,  467,  467,  467,  467,  976,  974,
      631,  789,  973,  631,  414,  414,  414,  414,  972,  971,
      639,  422,  790,  790,  790,  470,  792,  792,  792,  792,
      970,  860,  783,  468,  467,  467,  467,  467,  967,  934,
      966,  468,  467,  467,  467,  467,  632,  470,  631,  468,

      963,  631,  679,  679,  679,  470,  776,  776,  776,  776,
      679,  679,  679,  470,  764,  764,  935,  764,  962,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  777,
      764,  632,  764,  646,  647,  961,  646,  764,  764,  764,
      764,  646,  647,  639,  646,  960,  959,  958,  771,  646,
      647,  957,  646,  956,  649,  955,  862,  954,  859,  764,
      764,  764,  649,  953,  773,  952,  377,  378,  951,  632,
      649,  378,  950,  946,  321,  778,  778,  778,  778,  409,
      410,  945,  646,  647,  410,  646,  764,  764,  857,  764,
      764,  764,  944,  631,  941,  378,  631,  771,  777,  930,

      419,  631,  930,  649,  631,  649, 1140,  314,  410, 1140,
      863,  421,  422,  649,  457,  458,  422,  940,  419,  458,
      934,  649,  850,  866,  414,  414,  932,  414,  414,  414,
      663,  931,  414,  414,  924,  414,  414,  414,  639,  414,
      422,  664,  782,  458,  923,  936,  782,  414,  418,  414,
      631,  315, 1010,  631,  649,  867,  922,  921,  871,  467,
      467,  467,  467,  739,  632, 1078,  789,  919, 1078,  414,
      782,  414,  632,  918,  917,  916,  587,  790,  790,  790,
      470,  792,  792,  792,  792,  377,  378,  914,  468,  913,
      378,  631,  912,  911,  631,  639,  414,  414,  414,  414,

      414,  414,  470,  414,  414,  414,  663,  910,  414,  414,
      937,  414,  414,  414,  378,  414, 1006,  414,  782, 1006,
      909,  632,  782,  414,  414,  414,  631,  908,  907,  631,
      467,  467,  467,  467,  906,  631,  632,  789,  631,  928,
     1134, 1159,  905, 1134, 1159,  414,  782,  414,  790,  790,
      790,  470,  883,  884,  377,  378, 1009,  885,  904,  378,
      886,  887,  632, 1135, 1135,  888,  903,  902,  889,  890,
      901,  891,  414,  414,  414,  414,  409,  410, 1077,  900,
      639,  410,  419,  378,  457,  458,  899,  898,  897,  458,
      939,  938,  631,  421,  422,  631,  896,  632,  422,  631,

      419,  631,  631,  895,  631,  410,  632,  467,  467,  467,
      467,  894,  942,  458,  789,  893,  377,  378,  409,  410,
      947,  378,  422,  410,  892,  948,  948,  948,  470,  943,
      882,  881,  631,  457,  458,  631,  631,  639,  458,  631,
     1078, 1011,  419, 1078,  639,  378,  639,  410,  880, 1014,
      879, 1017, 1013,  421,  422,  878, 1159,  877,  422, 1159,
      419,  876,  458,  632, 1012,  875, 1022,  490,  631,  874,
      632,  631,  632,  467,  467,  467,  467,  639,  873, 1135,
      789,  639,  422,  870, 1080,  639, 1018,  869,  868,  865,
      864,  948,  948,  948,  470,  467,  467,  467,  467, 1079,

      377,  378,  789,  632,  639,  378,  856,  632,  419, 1140,
      314,  632, 1140,  948,  948,  948,  470,  409,  410,  421,
      422,  762,  410,  853,  422,  852,  419,  457,  458,  378,
      621, 1138,  458, 1078,  631,  631, 1078,  631,  631,  632,
      409,  410,  845,  844,  842,  410,  410, 1081,  422,  419,
      838, 1139, 1139, 1139, 1141,  837,  458,  457,  458,  836,
      421,  422,  458,  835, 1084,  422, 1085,  419,  631,  410,
      631,  631,  631,  631, 1089,  631,  834,  587,  631,  639,
      632,  631,  631,  831, 1195,  631,  458, 1195, 1195,  422,
      830, 1195,  724,  313,  314, 1160,  313, 1142,  384,  828,

      827,  384,  384,  384,  826,  632,  632,  825,  384,  824,
      823,  462,  822,  639,  462,  462,  462,  639, 1175,  466,
     1177,  462,  466,  466,  466,  821,  820,  639, 1162,  466,
      819,  818,  815,  639,  814,  813, 1187,  811, 1141,  632,
     1189,  632,  489,  632,  810,  489,  489,  489,  809,  632,
      808,  807,  489,  632,  806,  632,  805,  804,  803,  632,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  285,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  316,  316,  802,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      319,  564,  800,  799,  564,  564,  564,  798,  797,  569,
      796,  564,  569,  569,  569,  490,  794,  319,  793,  569,
      319,  319,  319,  787,  786,  785,  784,  319,  320,  399,
      320,  320,  628,  320,  779,  628,  628,  628,  320,  320,
      775,  628,  320,  320,  320,  327,  762,  327,  327,  327,
      327,  760,  327,  757,  760,  760,  760,  327,  327,  327,

      756,  327,  327,  327,  344,  344,  344,  344,  755,  746,
      745,  767,  743,  344,  767,  767,  767,  742,  344,  344,
     1206,  344,  344,  344,  321,  344,  344,  344,  344,  321,
      344,  344,  351,  321,  351,  351,  760,  351,  739,  760,
      760,  760,  351,  351,  598,  737,  351,  351,  351,  353,
      353,  353,  353,  736,  735,  734,  767,  767,  353,  767,
      767,  767,  733,  353,  353,  732,  353,  353,  353,  587,
      353,  353,  353,  353,  727,  353,  353,  374,  374,  725,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  376,  767,  722,  376,  767,  767,  767,  376,
      719,  376,  376,  376,  376,  376,  718,  570,  717,  376,
      376,  376,  716,  376,  376,  376,  565,  715,  714,  713,
      376,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  386,  726,  386,  386,
      712,  711,  710,  707,  386,  706,  726,  386,  386,  386,
      726,  726,  705,  704,  386,  395,  395,  395,  395,  319,

      703,  395,  319,  319,  319,  700,  726,  539,  699,  319,
      395,  698,  697,  395,  696,  726,  695,  520,  395,  726,
      726,  395,  395,  395,  638,  520,  694,  395,  395,  398,
      398,  398,  398,  638,  693,  691,  638,  638,  638,  514,
      509,  690,  689,  688,  398,  687,  398,  398,  398,  496,
      686,  490,  398,  684,  490,  398,  398,  398,  682,  476,
      681,  678,  398,  405,  405,  405,  405,  677,  455,  405,
      677,  677,  677,  673,  450,  384,  672,  677,  384,  384,
      384,  445,  671,  428,  663,  384,  405,  663,  663,  405,
      405,  405,  407,  399,  658,  392,  405,  406,  406,  655,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  408,  385,  654,  408,  383,  375,  358,  408,
      637,  408,  408,  408,  408,  408,  633,  627,  626,  408,
      408,  408,  625,  408,  408,  408,  321,  321,  598,  317,
      408,  416,  416,  596,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  420,  420,  594,  593,

      420,  590,  588,  587,  420,  583,  420,  420,  420,  420,
      420,  581,  420,  580,  420,  420,  420,  578,  420,  420,
      420,  638,  576,  575,  573,  420,  431,  431,  431,  431,
      638,  568,  431,  638,  638,  638,  539,  525,  524,  523,
      521,  431,  520,  516,  431,  509,  505,  496,  490,  431,
      476,  455,  431,  431,  431,  450,  445,  428,  431,  431,
      436,  436,  436,  436,  407,  407,  392,  383,  375,  436,
      358,  321,  318,  317, 1206,  436,  119,  436,  436,  119,
     1206, 1206, 1206,  436, 1206, 1206,  436,  436,  436, 1206,
     1206, 1206, 1206,  436,  439,  439,  439,  439,  685, 1206,

      439,  685,  685,  685, 1206, 1206,  692, 1206,  685,  692,
      692,  692, 1206, 1206, 1206, 1206,  692,  439, 1206, 1206,
      439,  439,  439, 1206, 1206, 1206, 1206,  439,  440,  564,
     1206,  440,  564,  564,  564, 1206, 1206,  440, 1206,  564,
      440,  440,  440, 1206, 1206, 1206, 1206,  440,  444,  444,
     1206,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  449,  449, 1206,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  454,  454,
     1206,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  456, 1206, 1206,  456, 1206, 1206, 1206,
      456, 1206,  456,  456,  456,  456,  456, 1206, 1206, 1206,
      456,  456,  456, 1206,  456,  456,  456, 1206, 1206, 1206,
     1206,  456,  465,  569, 1206,  465,  569,  569,  569, 1206,
     1206, 1206, 1206,  569, 1206,  465, 1206,  872, 1206,  465,

      872,  872,  872, 1206, 1206,  465, 1206,  872,  465,  465,
      465, 1206, 1206, 1206, 1206,  465,  471,  471,  471,  471,
     1206, 1206,  471, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206,  471,  471, 1206, 1206, 1206, 1206,  471,
     1206, 1206,  471,  471,  471, 1206, 1206, 1206, 1206,  471,
      479,  479,  479,  479, 1206, 1206,  479, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206,  479, 1206, 1206,  479, 1206,
     1206, 1206, 1206,  479, 1206, 1206,  479,  479,  479, 1206,
     1206, 1206,  479,  479,  482,  482,  482,  482, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  482,

     1206,  482,  482, 1206, 1206, 1206, 1206,  482, 1206, 1206,
      482,  482,  482, 1206, 1206, 1206, 1206,  482,  488,  488,
      488,  488, 1206, 1206,  488, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206,  488, 1206, 1206,  488,  488,  488, 1206, 1206, 1206,
     1206,  488,  491, 1206,  491, 1206, 1206, 1206, 1206, 1206,
      491, 1206, 1206,  491,  491,  491, 1206, 1206, 1206, 1206,
      491,  495,  495, 1206,  495, 1206, 1206, 1206, 1206, 1206,
      495, 1206, 1206,  495,  495,  495, 1206, 1206, 1206, 1206,
      495,  500,  500, 1206,  500,  500,  500,  500,  500,  500,

      500,  500,  500, 1206,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  504, 1206, 1206,  504,
     1206, 1206, 1206, 1206, 1206,  504, 1206, 1206,  504,  504,
      504, 1206, 1206, 1206, 1206,  504,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506, 1206,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  508,  508, 1206,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508, 1206,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  515, 1206, 1206,  515,
     1206, 1206, 1206, 1206, 1206,  515, 1206, 1206,  515,  515,
      515, 1206, 1206, 1206, 1206,  515,  519,  519, 1206,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  522,  522, 1206,  522, 1206,  522,  522,  522,  522,
      522,  522,  522, 1206,  522,  522,  522,  522, 1206,  522,
      522,  522,  522,  522, 1206,  522, 1206,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  532, 1206, 1206,  532,
     1206, 1206, 1206, 1206, 1206,  532, 1206, 1206, 1206, 1206,
      532,  532, 1206,  532, 1206, 1206, 1206, 1206, 1206,  532,
     1206, 1206,  532,  532,  532,  540,  540, 1206,  540, 1206,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540, 1206,  540,
     1206,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      544,  544, 1206,  544, 1206,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544, 1206,  544, 1206,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  553, 1206, 1206,  553, 1206,
     1206, 1206, 1206, 1206,  553, 1206, 1206,  553,  553,  553,
     1206, 1206, 1206, 1206,  553,  557,  557, 1206,  557,  557,
      557,  557,  557,  557,  557, 1206, 1206,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557, 1206,  557,
     1206,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      566, 1206,  566,  566, 1206, 1206, 1206, 1206,  566, 1206,
     1206,  566,  566,  566, 1206, 1206, 1206, 1206,  566,  571,
     1206,  571,  571, 1206, 1206, 1206, 1206,  571, 1206, 1206,
      571,  571,  571, 1206, 1206, 1206, 1206,  571,  574,  574,

     1206,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574, 1206,  574, 1206,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  577, 1206, 1206,  577, 1206, 1206, 1206,
     1206, 1206,  577, 1206, 1206,  577,  577,  577, 1206, 1206,
     1206, 1206,  577,  579,  579, 1206,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579, 1206,  579,
      579,  579,  579,  579,  579,  579,  579,  579, 1206,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  582,  582,
     1206,  582,  582,  582,  582,  582,  582,  582,  582,  582,

     1206,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582, 1206,  582, 1206,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  585, 1206, 1206,  585, 1206, 1206, 1206,
      585, 1206,  585, 1206, 1206,  585,  585,  585, 1206, 1206,
     1206, 1206,  585,  586, 1206,  586,  586,  586,  586,  586,
     1206, 1206,  586, 1206,  586, 1206, 1206,  586,  586,  586,
     1206, 1206, 1206, 1206,  586,  589,  589, 1206,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
     1206,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
     1206, 1206,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  592, 1206,  592,  592,
      592,  592,  592,  592, 1206,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592, 1206, 1206,  592,  592,  592,
     1206, 1206,  592,  592,  592,  592,  592,  592,  592,  592,
      344,  344,  344,  344, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206,  344,  344, 1206,  344,  344,  344,
     1206,  344,  344,  344,  344, 1206,  344,  344,  316,  316,

     1206,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  597,  597, 1206, 1206, 1206, 1206,  597,
     1206, 1206,  597,  597,  597, 1206, 1206, 1206, 1206,  597,
      320, 1206,  320,  320, 1206,  320, 1206, 1206, 1206, 1206,
      320,  320, 1206, 1206,  320,  320,  320,  599, 1206, 1206,
      599, 1206, 1206, 1206, 1206, 1206,  599, 1206, 1206,  599,
      599,  599,  606, 1206, 1206,  606, 1206,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  351, 1206,  351,
      351, 1206,  351, 1206, 1206, 1206, 1206,  351,  351, 1206,
     1206,  351,  351,  351,  353, 1206, 1206,  353, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206,  353,  353, 1206,
      353,  353,  353,  353,  374,  374, 1206,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  376,

     1206, 1206,  376, 1206, 1206, 1206,  376, 1206,  376,  376,
      376,  376,  376, 1206, 1206, 1206,  376,  376,  376, 1206,
      376,  376,  376, 1206, 1206, 1206, 1206,  376,  651, 1206,
     1206,  651, 1206, 1206, 1206,  651, 1206,  651, 1206,  651,
      651,  651, 1206, 1206, 1206,  651,  651,  651, 1206,  651,
      651,  651, 1206, 1206, 1206, 1206,  651,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  386, 1206,  386,  386, 1206, 1206, 1206, 1206,

      386, 1206, 1206,  386,  386,  386, 1206, 1206, 1206, 1206,
      386,  384, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  384, 1206,
     1206,  384,  384,  384, 1206, 1206, 1206, 1206,  384,  395,
      395,  395,  395, 1206, 1206,  395, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206,  395, 1206, 1206,  395, 1206, 1206,
     1206, 1206,  395, 1206, 1206,  395,  395,  395, 1206, 1206,
     1206,  395,  395,  398,  398,  398,  398, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  398, 1206,
      398,  398,  398, 1206, 1206, 1206,  398, 1206, 1206,  398,

      398,  398, 1206, 1206, 1206, 1206,  398,  405,  405,  405,
      405, 1206, 1206,  405, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      405, 1206, 1206,  405,  405,  405, 1206, 1206, 1206, 1206,
      405,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656, 1206,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  659, 1206,  659, 1206,
     1206, 1206,  659, 1206, 1206,  659,  659,  659, 1206, 1206,
     1206, 1206,  659,  406,  406, 1206,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  408, 1206,
     1206,  408, 1206, 1206, 1206,  408, 1206,  408,  408,  408,
      408,  408, 1206, 1206, 1206,  408,  408,  408, 1206,  408,
      408,  408, 1206, 1206, 1206, 1206,  408,  660, 1206, 1206,
      660, 1206, 1206, 1206,  660, 1206,  660, 1206,  660,  660,
      660, 1206, 1206, 1206,  660,  660,  660, 1206,  660,  660,
      660, 1206, 1206, 1206, 1206,  660,  414,  414, 1206,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  416,  416, 1206,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  420,  420, 1206, 1206,
      420, 1206, 1206, 1206,  420, 1206,  420,  420,  420,  420,
      420, 1206,  420, 1206,  420,  420,  420, 1206,  420,  420,
      420, 1206, 1206, 1206, 1206,  420,  665, 1206, 1206,  665,
     1206, 1206, 1206,  665, 1206,  665, 1206,  665,  665,  665,

     1206, 1206, 1206,  665,  665,  665, 1206,  665,  665,  665,
     1206, 1206, 1206, 1206,  665,  431,  431,  431,  431, 1206,
     1206,  431, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      431, 1206, 1206,  431, 1206, 1206, 1206, 1206,  431, 1206,
     1206,  431,  431,  431, 1206, 1206, 1206,  431,  431,  436,
      436,  436,  436, 1206, 1206, 1206, 1206, 1206,  436, 1206,
     1206, 1206, 1206, 1206,  436, 1206,  436,  436, 1206, 1206,
     1206, 1206,  436, 1206, 1206,  436,  436,  436, 1206, 1206,
     1206, 1206,  436,  439,  439,  439,  439, 1206, 1206,  439,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206,  439, 1206, 1206,  439,
      439,  439, 1206, 1206, 1206, 1206,  439,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668, 1206,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  670, 1206, 1206,  670, 1206, 1206, 1206, 1206,
     1206,  670, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  670,
     1206, 1206, 1206, 1206, 1206,  670, 1206, 1206,  670,  670,
      670, 1206, 1206, 1206, 1206,  670,  440, 1206, 1206,  440,
     1206, 1206, 1206, 1206, 1206,  440, 1206, 1206,  440,  440,

      440, 1206, 1206, 1206, 1206,  440,  444,  444, 1206,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  449,  449, 1206,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  454,  454, 1206,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  456, 1206, 1206,  456, 1206, 1206, 1206,  456, 1206,
      456,  456,  456,  456,  456, 1206, 1206, 1206,  456,  456,
      456, 1206,  456,  456,  456, 1206, 1206, 1206, 1206,  456,
      674, 1206, 1206,  674, 1206, 1206, 1206,  674, 1206,  674,
     1206,  674,  674,  674, 1206, 1206, 1206,  674,  674,  674,
     1206,  674,  674,  674, 1206, 1206, 1206, 1206,  674,  465,
     1206, 1206,  465, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  465, 1206, 1206, 1206,  465, 1206, 1206, 1206,
     1206, 1206,  465, 1206, 1206,  465,  465,  465, 1206, 1206,

     1206, 1206,  465,  471,  471,  471,  471, 1206, 1206,  471,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      471,  471, 1206, 1206, 1206, 1206,  471, 1206, 1206,  471,
      471,  471, 1206, 1206, 1206, 1206,  471,  680,  680,  680,
      680, 1206, 1206,  680, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206,  680,  680, 1206, 1206, 1206, 1206,
      680, 1206, 1206,  680,  680,  680, 1206, 1206, 1206, 1206,
      680,  479,  479,  479,  479, 1206, 1206,  479, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206,  479, 1206, 1206,  479,
     1206, 1206, 1206, 1206,  479, 1206, 1206,  479,  479,  479,

     1206, 1206, 1206,  479,  479,  482,  482,  482,  482, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      482, 1206,  482,  482, 1206, 1206, 1206, 1206,  482, 1206,
     1206,  482,  482,  482, 1206, 1206, 1206, 1206,  482,  488,
      488,  488,  488, 1206, 1206,  488, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  488, 1206, 1206,  488,  488,  488, 1206, 1206,
     1206, 1206,  488,  683, 1206, 1206, 1206, 1206, 1206,  683,
     1206, 1206,  683,  683,  683, 1206, 1206, 1206, 1206,  683,
      491, 1206,  491, 1206, 1206, 1206, 1206, 1206,  491, 1206,

     1206,  491,  491,  491, 1206, 1206, 1206, 1206,  491,  685,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206,  685, 1206, 1206,  685,
      685,  685, 1206, 1206, 1206, 1206,  685,  495,  495, 1206,
      495, 1206, 1206, 1206, 1206, 1206,  495, 1206, 1206,  495,
      495,  495, 1206, 1206, 1206, 1206,  495,  500,  500, 1206,
      500,  500,  500,  500,  500,  500,  500,  500,  500, 1206,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  504, 1206, 1206,  504, 1206, 1206, 1206, 1206,

     1206,  504, 1206, 1206,  504,  504,  504, 1206, 1206, 1206,
     1206,  504,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506, 1206,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  508,  508, 1206,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
     1206,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  692, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  692,

     1206, 1206,  692,  692,  692, 1206, 1206, 1206, 1206,  692,
      515, 1206, 1206,  515, 1206, 1206, 1206, 1206, 1206,  515,
     1206, 1206,  515,  515,  515, 1206, 1206, 1206, 1206,  515,
      519,  519, 1206,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  522,  522, 1206,  522, 1206,
      522,  522,  522,  522,  522,  522,  522, 1206,  522,  522,
      522,  522, 1206,  522,  522,  522,  522,  522, 1206,  522,
     1206,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      532, 1206, 1206,  532, 1206, 1206, 1206, 1206, 1206,  532,
     1206, 1206, 1206, 1206,  532,  532, 1206,  532, 1206, 1206,
     1206, 1206, 1206,  532, 1206, 1206,  532,  532,  532,  540,
      540, 1206,  540, 1206,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540, 1206,  540, 1206,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  544,  544, 1206,  544, 1206,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544, 1206,  544, 1206,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  553,

     1206, 1206,  553, 1206, 1206, 1206, 1206, 1206,  553, 1206,
     1206,  553,  553,  553, 1206, 1206, 1206, 1206,  553,  557,
      557, 1206,  557,  557,  557,  557,  557,  557,  557, 1206,
     1206,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557, 1206,  557, 1206,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  566, 1206,  566,  566, 1206, 1206,
     1206, 1206,  566, 1206, 1206,  566,  566,  566, 1206, 1206,
     1206, 1206,  566,  564, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      564, 1206, 1206,  564,  564,  564, 1206, 1206, 1206, 1206,

      564,  571, 1206,  571,  571, 1206, 1206, 1206, 1206,  571,
     1206, 1206,  571,  571,  571, 1206, 1206, 1206, 1206,  571,
      569, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206,  569, 1206, 1206,
      569,  569,  569, 1206, 1206, 1206, 1206,  569,  574,  574,
     1206,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574, 1206,  574, 1206,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  577, 1206, 1206,  577, 1206, 1206, 1206,
     1206, 1206,  577, 1206, 1206,  577,  577,  577, 1206, 1206,

     1206, 1206,  577,  579,  579, 1206,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579, 1206,  579,
      579,  579,  579,  579,  579,  579,  579,  579, 1206,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  582,  582,
     1206,  582,  582,  582,  582,  582,  582,  582,  582,  582,
     1206,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582, 1206,  582, 1206,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  729, 1206, 1206, 1206, 1206, 1206, 1206,
     1206,  729, 1206,  729,  729,  729,  729,  729, 1206, 1206,
      729, 1206,  729, 1206, 1206,  729,  729,  729, 1206, 1206,

     1206, 1206,  729,  586, 1206,  586,  586,  586,  586,  586,
     1206, 1206,  586, 1206,  586, 1206, 1206,  586,  586,  586,
     1206, 1206, 1206, 1206,  586,  731, 1206, 1206,  731, 1206,
     1206, 1206,  731, 1206,  731, 1206, 1206,  731,  731,  731,
     1206, 1206, 1206, 1206,  731,  589,  589, 1206,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
     1206,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
     1206, 1206,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  592, 1206,  592,  592,
      592,  592,  592,  592, 1206,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592, 1206, 1206,  592,  592,  592,
     1206, 1206,  592,  592,  592,  592,  592,  592,  592,  592,
      597,  597, 1206, 1206, 1206, 1206,  597, 1206, 1206,  597,
      597,  597, 1206, 1206, 1206, 1206,  597,  738,  738, 1206,
      738,  738,  738,  738, 1206,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  599,  599, 1206,  599, 1206, 1206, 1206, 1206,
     1206,  599, 1206, 1206,  599,  599,  599,  320, 1206,  320,
      320, 1206,  320, 1206, 1206, 1206, 1206,  320,  320, 1206,
     1206,  320,  320,  320,  606, 1206, 1206,  606, 1206,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  750,
      750, 1206,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,

      750,  750,  750,  750,  628, 1206, 1206,  628, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206,  628, 1206, 1206,
      628,  628,  628,  761, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206,  761, 1206,  761, 1206,  761,  761, 1206,
     1206, 1206, 1206,  761, 1206, 1206,  761,  761,  761, 1206,
     1206,  761,  344, 1206, 1206,  344, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206,  344, 1206, 1206,  344,  344,
      344,  344,  765,  765, 1206,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  353, 1206, 1206,
      353, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      353,  353, 1206,  353,  353,  353,  353,  651, 1206, 1206,
      651, 1206, 1206, 1206,  651, 1206,  651,  651,  651,  651,
      651, 1206, 1206, 1206,  651,  651,  651, 1206,  651,  651,
      651, 1206, 1206, 1206, 1206,  651,  376, 1206, 1206,  376,
     1206, 1206, 1206,  376, 1206,  376,  376,  376,  376,  376,

     1206, 1206, 1206,  376,  376,  376, 1206,  376,  376,  376,
     1206, 1206, 1206, 1206,  376,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      659, 1206,  659, 1206, 1206, 1206,  659, 1206, 1206,  659,
      659,  659, 1206, 1206, 1206, 1206,  659,  660, 1206, 1206,
      660, 1206, 1206, 1206,  660, 1206,  660,  660,  660,  660,
      660, 1206, 1206, 1206,  660,  660,  660, 1206,  660,  660,
      660, 1206, 1206, 1206, 1206,  660,  408, 1206, 1206,  408,

     1206, 1206, 1206,  408, 1206,  408,  408,  408,  408,  408,
     1206, 1206, 1206,  408,  408,  408, 1206,  408,  408,  408,
     1206, 1206, 1206, 1206,  408,  781,  781, 1206,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      665,  665, 1206, 1206,  665, 1206, 1206, 1206,  665, 1206,
      665,  665,  665,  665,  665, 1206,  665, 1206,  665,  665,
      665, 1206,  665,  665,  665, 1206, 1206, 1206, 1206,  665,
      420,  420, 1206, 1206,  420, 1206, 1206, 1206,  420, 1206,

      420,  420,  420,  420,  420, 1206,  420, 1206,  420,  420,
      420, 1206,  420,  420,  420, 1206, 1206, 1206, 1206,  420,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  670, 1206, 1206,  670, 1206,
     1206, 1206, 1206, 1206,  670, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  670, 1206, 1206, 1206, 1206, 1206,  670, 1206,
     1206,  670,  670,  670, 1206, 1206, 1206, 1206,  670,  674,
     1206, 1206,  674, 1206, 1206, 1206,  674, 1206,  674,  674,

      674,  674,  674, 1206, 1206, 1206,  674,  674,  674, 1206,
      674,  674,  674, 1206, 1206, 1206, 1206,  674,  456, 1206,
     1206,  456, 1206, 1206, 1206,  456, 1206,  456,  456,  456,
      456,  456, 1206, 1206, 1206,  456,  456,  456, 1206,  456,
      456,  456, 1206, 1206, 1206, 1206,  456,  791,  791,  791,
      791, 1206, 1206,  791, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206,  791,  791, 1206, 1206, 1206, 1206,
      791, 1206, 1206,  791,  791,  791, 1206, 1206, 1206, 1206,
      791,  677,  677,  677,  677, 1206, 1206,  677, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  677,

     1206, 1206, 1206, 1206,  677, 1206, 1206,  677,  677,  677,
     1206, 1206, 1206, 1206,  677,  680,  680,  680,  680, 1206,
     1206,  680, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  680,  680, 1206, 1206, 1206, 1206,  680, 1206,
     1206,  680,  680,  680, 1206, 1206, 1206, 1206,  680,  683,
     1206, 1206, 1206, 1206, 1206,  683, 1206, 1206,  683,  683,
      683, 1206, 1206, 1206, 1206,  683,  795, 1206,  795, 1206,
     1206, 1206, 1206, 1206,  795, 1206, 1206,  795,  795,  795,
     1206, 1206, 1206, 1206,  795,  500,  500, 1206,  500,  500,
      500,  500,  500,  500,  500,  500,  500, 1206,  500,  500,

      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      801, 1206, 1206, 1206, 1206, 1206,  801, 1206, 1206,  801,
      801,  801, 1206, 1206, 1206, 1206,  801,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812, 1206,  812,  812,  812,  812,
      812, 1206,  812,  812, 1206, 1206,  812,  812,  812,  812,
      812,  812,  729, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
      729, 1206,  729,  729,  729,  729,  729, 1206, 1206,  729,
     1206,  729, 1206, 1206,  729,  729,  729, 1206, 1206, 1206,

     1206,  729,  832, 1206, 1206,  832, 1206, 1206, 1206,  832,
     1206,  832, 1206, 1206,  832,  832,  832, 1206, 1206, 1206,
     1206,  832,  833, 1206,  833,  833,  833,  833,  833, 1206,
     1206,  833, 1206,  833, 1206, 1206,  833,  833,  833, 1206,
     1206, 1206, 1206,  833,  738,  738, 1206,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  839,
     1206, 1206,  839, 1206, 1206, 1206, 1206, 1206,  839, 1206,
     1206,  839,  839,  839,  327, 1206,  327, 1206,  327,  327,

     1206,  327, 1206, 1206, 1206, 1206,  327,  327, 1206, 1206,
      327,  327,  327,  750,  750, 1206,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  761, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  761, 1206,
      761, 1206,  761,  761, 1206, 1206, 1206, 1206,  761, 1206,
     1206,  761,  761,  761, 1206, 1206,  761,  344, 1206, 1206,
      344, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

      344, 1206, 1206,  344,  344,  344,  344,  764,  764, 1206,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  765,  765, 1206,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  353, 1206, 1206,
      353, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

      353,  353, 1206,  353,  353,  353,  353,  320,  320, 1206,
      320, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,  320,
     1206,  320,  320, 1206,  320,  320, 1206, 1206, 1206,  320,
      320, 1206, 1206,  320,  320,  320, 1206,  320,  376, 1206,
     1206,  376, 1206, 1206, 1206,  376, 1206,  376,  376,  376,
      376,  376, 1206, 1206, 1206,  376,  376,  376, 1206,  376,
      376,  376, 1206, 1206, 1206, 1206,  376,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  408, 1206, 1206,  408, 1206, 1206, 1206,  408,
     1206,  408,  408,  408,  408,  408, 1206, 1206, 1206,  408,
      408,  408, 1206,  408,  408,  408, 1206, 1206, 1206, 1206,
      408,  781,  781, 1206,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  420,  420, 1206, 1206,
      420, 1206, 1206, 1206,  420, 1206,  420,  420,  420,  420,
      420, 1206,  420, 1206,  420,  420,  420, 1206,  420,  420,
      420, 1206, 1206, 1206, 1206,  420,  456, 1206, 1206,  456,

     1206, 1206, 1206,  456, 1206,  456,  456,  456,  456,  456,
     1206, 1206, 1206,  456,  456,  456, 1206,  456,  456,  456,
     1206, 1206, 1206, 1206,  456,  791,  791,  791,  791, 1206,
     1206,  791, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  791,  791, 1206, 1206, 1206, 1206,  791, 1206,
     1206,  791,  791,  791, 1206, 1206, 1206, 1206,  791,  677,
      677,  677,  677, 1206, 1206,  677, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206,  677, 1206, 1206,
     1206, 1206,  677, 1206, 1206,  677,  677,  677, 1206, 1206,
     1206, 1206,  677,  795, 1206,  795, 1206, 1206, 1206, 1206,

     1206,  795, 1206, 1206,  795,  795,  795, 1206, 1206, 1206,
     1206,  795,  500,  500, 1206,  500,  500,  500,  500,  500,
      500,  500,  500,  500, 1206,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  801, 1206, 1206,
     1206, 1206, 1206,  801, 1206, 1206,  801,  801,  801, 1206,
     1206, 1206, 1206,  801,  915, 1206, 1206, 1206, 1206, 1206,
     1206, 1206,  915, 1206,  915,  915,  915,  915,  915, 1206,
     1206,  915, 1206,  915, 1206, 1206,  915,  915,  915, 1206,
     1206, 1206, 1206,  915,  833, 1206,  833,  833,  833,  833,

      833, 1206, 1206,  833, 1206,  833, 1206, 1206,  833,  833,
      833, 1206, 1206, 1206, 1206,  833,  920,  920, 1206,  920,
     1206, 1206, 1206, 1206, 1206,  920, 1206, 1206,  920,  920,
      920,  327, 1206,  327, 1206,  327,  327, 1206,  327, 1206,
     1206, 1206, 1206,  327,  327, 1206, 1206,  327,  327,  327,
      929,  929, 1206,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  949,  949,  949,  949, 1206,
     1206,  949, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206,  949,  949, 1206, 1206, 1206, 1206,  949, 1206,
     1206,  949,  949,  949, 1206, 1206, 1206, 1206,  949,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975, 1206,  975,  975,
      975,  975,  975, 1206,  975,  975, 1206,  975, 1206,  975,
      975,  975,  975,  975, 1005, 1005, 1206, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1206, 1048, 1048,
     1048, 1048, 1048, 1206, 1048, 1048, 1206, 1206, 1206, 1048,
     1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1206, 1049, 1049, 1049, 1049, 1049, 1206, 1049,
     1049, 1206, 1206, 1206, 1049, 1049, 1049, 1049, 1049, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1206, 1100, 1100,
     1100, 1100, 1100, 1206, 1100, 1100, 1206, 1206, 1206, 1100,
     1100, 1100, 1100, 1100, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1206, 1111, 1111, 1111, 1111, 1111, 1206, 1111,
     1111, 1206, 1206, 1206, 1111, 1111, 1111, 1111, 1111, 1158,
     1158, 1206, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158,   89, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206
    } ;

static yyconst flex_int16_t yy_chk[10944] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   49,  343,   24,
        4,    4,   37,    4,    4,   38,   41,    4,    4,    4,

       50,   42,  106,   37,   59,  106,   38,   41,  107,  343,
      123,  107,   42,   45,   45,  123,   45,   55,   45,   55,
       41,   60, 1161,   21,   22,   42,   23,   46,   46,   24,
       46,   49,   46,  107, 1201, 1161,   37,   65,   66,   38,
       41,   55,   83,   71,   50,   42,   53,   53,   59,   53,
        4,    5,    5,    5,    5,    5,    5,    5,   45,    5,
        5,   55,    5,    5,    5,   60,    5,   71,    5,    5,
     1199,  548,   46,    5,    5,    5,    5,   47,   48,   47,
       48,   65,   66,  337,  293,  548,   83,   71,   47,   48,
       56,   53,   56,   47,   48,  227,    5,    5,    5,   85,

      227,   47,   48,   54,   54,  337,   54,  217,   85,   85,
      217,  293,  217,   57,   56,   57,   84,   58,  541,   58,
      541,   47,   48,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   56,    6,    6,   57,    6,    6,
        6,   58,    6,   72,    6,    6,   63,   73,   54,    6,
        6,    6,    6,   64,   74,   63,   63,   57,  900,   86,
       84,   58,   64,   64,  329,  900,   97,   72,   86,   86,
       63,   73,    6,    6,    6,   97,  244,   64,   74,  110,
      244,  110,  110,  110,  323,   97,  232,   72,  110,  232,
       63,   73,  322,  329,  323,  322,  232,   64,   74,    6,

        6,    6,    6,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
       13,   13,   13,   13,   13,   13,   77,   13,   13,  334,
       13,   13,   13,   78,   13,   79,   13,   13,   80, 1197,
       77,   13,   13,   13,   13,  270,   79,   78, 1194,   80,
      270,  235,  334,   98,  235,   98,   98,   98,   98,   79,

       92,  235,   80,   92,   13,   13,   13,   98,  124,  124,
       77,  124,  177,  115,  115,  177,  904,   78,  115,   79,
       93,   93,   80,   93,  275,   92,  177,   98,  335,  275,
      904,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,  115,   14,   14,   92,   14,   14,   14,  333,
       14,  335,   14,   14,   87,  124,   88,   14,   14,   14,
       14,  208,   87, 1191,   88,   93,  116,  116,  137,  137,
      333,  116,  208,  137,  245,   87,   87,   88,   88,  245,
       14,   14,   14,  245,  101,  328,  101,  101,  328,  101,
      101,  101, 1190,  333, 1186,  116,  101,  137,   87,   87,

       88,   88, 1200,  332,  332,  208, 1200,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   15,  101,   15,
       15,  506,   15,   15,   15,  332,   15,  332,   15,   15,
      346, 1183,  506,   15,   15,   15,   15,  103,  338,  103,
      103,  384,  103,  103,  103,  108,  384,  111,  108,  103,
      111,  108,  133,  133,  133,  133,   15,   15,   15,  133,
      108,  338,  111,  580,  386,  506,  108,  346,  111,  386,
      108,  103,  138,  138,  611,  564, 1182,  138,  132,  132,
      564,  132,  580,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  346,   16,   16,  611,   16,   16,

       16,  138,   16,  360,   16,   16,  360, 1181,  576,   16,
       16,   16,   16,  109,  109,  365,  109,  108,  365,  111,
      126,  126,  126,  126,  109,  132,  109,  109,  109,  109,
      415,  330,   16,   16,   16,  576,  126,  439,  109, 1196,
      439,  126,  155,  155,  155,  155, 1196,  439,  415,  155,
      191,  191,  191,  191,  330,  330,  330,  191,  109,   16,
       16,   16,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   25,
       25,   25,   25,   25,   25,   25,  370,   25,   25,  370,
       25,   25,   25,  566,   25,  377,   25,   25,  566,  377,
      569,   25,   25,   25,   25,  569,  127,  127,  127,  127,
      617,  370,  128,  128,  128,  128,  571,  238,  238,  128,
      238,  571,  127,  377,   25,   25,   25,  127,  128,  117,
      117,  144,  117,  128,  617,  517,  171,  171,  517, 1180,
      517,  171,  144,  144, 1179,  117,  117,  144, 1178,  144,
      117,   25,   25,   25,   25,   26,   26,   26,   26,   26,

       26,   26,  238,   26,   26,  171,   26,   26,   26, 1174,
       26,  144,   26,   26,  117, 1173,  117,   26,   26,   26,
       26,  145,  131,  131,  131,  131,  128,  409,  614,  172,
      172,  409,  145,  145,  172,  663, 1171,  145,  131,  145,
       26,   26,   26,  131,  131,  181,  181,  181,  181, 1170,
      249,  614,  181,  663,  249,  409,  362,  362,  172,  362,
      249,  145,  249,  181,  181,  181,  181,   26,   26,   26,
       26,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,  159,  159,   51,  159,  887, 1169,   51,
       51,   51,   51,   51,  585,  149,  149,  149,  149,  129,
      129,  129,  129,  887,  615,  585,  129,  150,  150,  150,
      150,  149,   51,   51,   51,  129,  149, 1168,  163,  163,
      129,  163,  363,  150,  363,  363,  363,  615,  150, 1167,
      159,  600,  167,  167,  600,  167, 1139, 1139, 1139,   51,
       51,   51,   51,   51,   51,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,  140,  140,   52,  140,  163,  622,   52,   52,   52,
       52,   52,  628,  129, 1166,  628,  331,  140,  140,  167,
      331,  747,  140,  154,  154,  154,  154,  616,  331,  622,
       52,   52,   52,  154,  184,  184,  184,  184,  331,  154,
      368,  368,  331,  368,  154,  747,  140, 1165,  140,  616,
      184,  331, 1164,  379,  379,  184,  379,   52,   52,   52,
       52,   52,   52,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,  146,   81,   81, 1163,  376,  376,   81,   81,   81,
      376,   81,  146,  146,  729,  388,  388,  146,  388,  146,
     1158,  151,  151,  151,  151,  729,  400,  400,  151,  400,
       81,   81,   81,  619,  376,  173,  173,  151,  173,  961,
     1155,  146,  151,  182,  182, 1154,  182,  313,  313,  421,
      313,  173,  173,  421,  961,  619,  173,   81,   81,   81,
       81,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,  421,   82,   82,
      173,  623,  173,   82,   82,   82,  311,   82,  631,  311,
      182,  631,  313,  148,  148,  151,  148, 1152,  148,  185,

      185,  185,  185,  623,  624, 1151,   82,   82,   82,  148,
      148,  311,  378,  378,  148,  185,  148,  378,  314,  314,
      185,  314,  190,  190, 1150,  190,  624,  189,  189,  189,
      189,  311,  748,   82,   82,   82,   82,   99,  148,  530,
      148,  378,  530,  189,  152,  152,  152,  152,  189,  530,
       99,  152,  186,  186,  186,  186,  748, 1149,  754,  186,
      152,   99,   99,  314,  925,  152,   99,   99,  186,  190,
      744,   99,   99,  186,   99,   99,  532,  196,  196,  532,
      196,  754,  644,   99,   99,  644,  532,  925,   99,   99,
      200,  200,  744,  200,   99,   99,   99,   99,   99,   99,

      100,  100,  100,  100,  203,  203, 1148,  203, 1147,  100,
      230,  230,  650,  230, 1146,  650,  100,  100,  152,  100,
      187,  187,  187,  187,  196,  250,  186,  187,  236,  236,
      250,  236,  832, 1145,  250,  353,  187,  200,  353,  100,
      250,  187,  250,  832,  749,  706,  100,  100,  706,  253,
      253,  203,  253,  257,  257,  457,  257,  230,  100,  457,
      211,  211,  211,  211, 1203,  100,  749,  100,  100,  102,
      102,  102,  102, 1144,  926,  236,  211,  211,  102,  211,
      353,  752, 1203,  457,  354,  102,  102,  354,  102, 1143,
     1141, 1133,  263,  263,  187,  263,  253,  926,  736,  211,

      257,  266,  266,  752,  266,  706,  353, 1132,  102,  371,
      102,  371,  371,  371,  724,  102,  102,  724,  371,  411,
      411,  336,  411,  741,  336, 1117,  741,  102,  211,  354,
      399,  399,  399,  399,  102,  736,  102,  102,  105,  263,
      758,  105,  354,  758,  336,  915,  462,  336,  266,  462,
      105,  105,  846,  105,  105,  354,  915,  105,  105,  105,
      462,  336,  736,  105,  847,  351, 1188,  351,  351,  336,
      351,  351,  351,  352,  846,  352,  352,  351,  352,  352,
      352, 1188,  851,  105,  336,  352,  847,  361,  424,  424,
      361,  424,  355,  762,  356,  355,  762,  356, 1116,  351,

      357,  356,  361,  357,  851, 1114,  364,  352,  361,  364,
      105,  143,  143, 1113,  143,  143,  143,  143, 1107,  143,
      143,  364,  143,  143,  143, 1106,  143,  364,  143,  143,
     1004, 1105, 1104,  143,  143,  143,  143,  355,  356,  356,
     1103,  396,  396,  396,  396,  357,  463,  366,  396,  463,
      366,  372,  355, 1004,  372, 1102,  143,  143,  143,  361,
      463,  357,  366,  355,  766,  356,  372,  766,  366,  381,
      381,  357,  372, 1101,  381, 1099,  367,  367,  364,  367,
     1076, 1075, 1073,  143,  143,  143,  143,  212,  212,  465,
      212,  367,  465,  212,  212,  212,  212,  367,  381,  373,

     1072,  367,  373,  465, 1071,  391,  391,  391,  391,  212,
      212,  381,  212, 1070,  373,  392,  392,  392,  392,  366,
      373,  391,  392,  372,  441,  441,  391,  441, 1069,  766,
      829,  392,  212,  829,  212,  766,  392,  394,  394,  394,
      394, 1068, 1067, 1066,  394,  408,  408, 1065,  367,  618,
      408, 1064,  618,  394,  395,  395,  395,  395,  394, 1063,
     1062,  212,  312,  312,  312,  312,  403,  403,  403,  403,
      395,  373,  618,  403,  408,  395,  395,  854,  312,  312,
      854,  312, 1061, 1060,  397,  397,  397,  397, 1059,  392,
      620,  397, 1058,  620,  398,  398,  398,  398, 1057,  890,

      397,  312,  890,  446,  446,  397,  446, 1176,  312,  312,
      398,  394, 1056,  620,  982,  398,  398,  982, 1176, 1055,
      312,  404,  404,  404,  404, 1054, 1053,  312,  404,  312,
      312,  326,  451,  451,  326,  451,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
     1051, 1050, 1046,  326,  326,  326,  326,  326,  397,  410,
      410, 1045,  456,  456,  410,  458,  458,  456,  413,  413,
      458,  420, 1115,  413,  422, 1115,  326,  326,  326, 1044,
     1043, 1042,  420,  420,  426,  422,  422,  420,  410,  420,
      422,  456,  422, 1041,  458,  426,  426,  413,  459,  459,

      426,  459,  426,  326,  326,  326,  326,  326,  326,  344,
      413,  420,  344, 1040,  422,  344,  344,  344,  344,  427,
      427,  427,  427, 1038,  426, 1037,  432,  432,  432,  432,
     1036,  344,  344,  432,  344,  427,  640,  426, 1035,  640,
      427,  428,  428,  428,  428, 1033, 1032, 1031,  428,  430,
      430,  430,  430, 1030,  344, 1029,  430,  428,  431,  431,
      431,  431,  428,  472,  472,  430,  472, 1028,  431, 1027,
      430, 1026,  461,  461,  431,  483,  483,  461,  483,  431,
      344,  640,  344,  344,  359, 1025, 1024,  359,  437,  437,
      437,  437,  640,  651,  651,  437,  359,  359,  651,  359,

      359,  461, 1023,  359,  359,  359, 1021,  640, 1020,  359,
      433,  433,  433,  433,  461,  428, 1019,  433,  434,  434,
      434,  434,  651,  430,  492,  492,  433,  492,  434,  359,
      637,  433, 1016,  637,  434,  438,  438,  438,  438,  434,
     1015, 1008,  438,  436,  436,  436,  436,  480,  480,  480,
      480, 1007, 1172,  436,  480, 1172,  359,  416,  416,  436,
      416,  416,  416,  416,  436,  416,  416, 1005,  416,  416,
      416, 1003,  416,  669,  416,  416,  669, 1002, 1001,  416,
      416,  416,  416,  669,  433, 1000,  999,  466,  466,  466,
      466,  998,  997,  637,  466,  467,  467,  467,  467,  996,

      995,  637,  416,  416,  416,  466,  466,  466,  466,  994,
      486,  486,  486,  486,  993,  670,  467,  486,  670,  475,
      475,  475,  475,  497,  497,  670,  497,  992,  991,  416,
      416,  416,  416,  417,  417,  475,  417,  417,  417,  417,
      475,  417,  417,  990,  417,  417,  417,  989,  417,  751,
      417,  417,  751,  988,  987,  417,  417,  417,  417,  501,
      501,  986,  501,  469,  469,  469,  469,  985,  512,  512,
      469,  512,  751,  984,  479,  479,  479,  479,  417,  417,
      417,  469,  469,  469,  469,  527,  527,  983,  527,  981,
      479,  471,  471,  471,  471,  479,  533,  533,  471,  533,

      550,  550,  979,  550,  976,  417,  417,  417,  417,  471,
      471,  471,  471,  476,  476,  476,  476,  974,  973,  972,
      476,  478,  478,  478,  478,  971,  970,  969,  478,  476,
      482,  482,  482,  482,  476,  968,  967,  478,  481,  481,
      481,  481,  478,  966,  965,  481,  482,  536,  536,  753,
      536,  482,  753,  964,  481,  487,  487,  487,  487,  481,
      554,  554,  487,  554,  558,  558,  963,  558,  561,  561,
      629,  561,  753,  629,  962,  643,  643,  629,  643, 1185,
      848,  633, 1185,  848,  633,  960,  959,  476,  652,  652,
      643, 1192,  536,  652, 1192,  478,  643,  641,  642,  958,

      641,  642,  645,  848,  645,  645,  645,  763, 1195,  957,
      763, 1195,  481,  605,  629,  956,  605,  652,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  633,  955,  954,  605,  605,  605,  605,  605,
      952,  629,  641,  642,  653,  653,  951,  643,  641,  653,
      646,  646,  633,  646,  656,  656,  656,  656,  605,  605,
      605,  642,  740,  763,  740,  646,  740,  740,  641,  642,
      950,  646,  849,  653,  946,  849,  740,  656,  763,  770,
     1198,  945,  770, 1198,  653,  605,  605,  605,  605,  605,
      605,  636,  636,  944,  636,  849,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  941,  636,  940,  636,
      648,  648,  932,  648,  636,  636,  636,  636,  649,  649,
     1202,  649,  646, 1202,  770,  648,  657,  657,  657,  657,
      931,  648,  929,  649,  924,  648,  636,  636,  636,  649,
      660,  660,  661,  661,  770,  660,  923,  661,  921,  657,
      770,  662,  662,  920,  674,  674,  662,  675,  675,  674,
      919,  918,  675,  636,  636,  636,  636,  636,  636,  660,
      917,  661,  916,  676,  676,  914,  927,  913,  676,  927,
      662,  855,  648,  674,  855,  912,  675,  911,  910,  909,
      649,  662,  664,  664,  908,  664,  664,  664,  664,  927,

      664,  664,  676,  664,  664,  664,  907,  664,  665,  664,
      664,  666,  906,  676,  664,  664,  664,  664,  857,  665,
      665,  857,  666,  666,  665,  769,  665,  666,  769,  666,
      840,  667,  840,  905,  840,  840,  903,  664,  664,  664,
      902,  855,  667,  667,  840,  901,  899,  667,  665,  667,
      898,  666,  855,  897,  677,  677,  677,  677,  896,  895,
      858,  677,  894,  858,  664,  664,  664,  664,  893,  892,
      769,  667,  677,  677,  677,  677,  678,  678,  678,  678,
      891,  769,  667,  678,  679,  679,  679,  679,  889,  857,
      888,  679,  680,  680,  680,  680,  769,  678,  768,  680,

      886,  768,  679,  679,  679,  679,  776,  776,  776,  776,
      680,  680,  680,  680,  765,  765,  858,  765,  885,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  776,
      765,  858,  765,  771,  771,  884,  771,  765,  765,  765,
      765,  772,  772,  768,  772,  883,  882,  881,  771,  773,
      773,  880,  773,  879,  771,  878,  772,  877,  768,  765,
      765,  765,  772,  876,  773,  875,  774,  774,  874,  768,
      773,  774,  873,  870,  773,  778,  778,  778,  778,  780,
      780,  869,  862,  862,  780,  862,  765,  765,  765,  765,
      765,  765,  868,  859,  865,  774,  859,  862,  778,  930,

      783,  935,  930,  862,  935,  771, 1140, 1140,  780, 1140,
      774,  783,  783,  772,  788,  788,  783,  864,  783,  788,
      856,  773,  930,  780,  781,  781,  853,  781,  781,  781,
      781,  852,  781,  781,  845,  781,  781,  781,  859,  781,
      783,  781,  781,  788,  844,  859,  781,  781,  781,  781,
      860, 1140,  935,  860,  862,  783,  843,  842,  788,  790,
      790,  790,  790,  839,  859, 1010,  790,  837, 1010,  781,
      781,  781,  935,  836,  835,  834,  833,  790,  790,  790,
      790,  792,  792,  792,  792, 1081, 1081,  831,  792,  830,
     1081,  933,  828,  827,  933,  860,  781,  781,  781,  781,

      782,  782,  792,  782,  782,  782,  782,  826,  782,  782,
      860,  782,  782,  782, 1081,  782, 1006,  782,  782, 1006,
      825,  860,  782,  782,  782,  782, 1009,  824,  823, 1009,
      791,  791,  791,  791,  822,  861, 1010,  791,  861, 1006,
     1074, 1134,  821, 1074, 1134,  782,  782,  782,  791,  791,
      791,  791,  805,  805,  863,  863,  933,  805,  820,  863,
      805,  805,  933, 1074, 1134,  805,  819,  818,  805,  805,
      817,  805,  782,  782,  782,  782,  866,  866, 1009,  815,
      861,  866,  867,  863,  871,  871,  814,  813,  811,  871,
      863,  861,  936,  867,  867,  936,  810, 1009,  867,  937,

      867,  938,  937,  809,  938,  866,  861,  872,  872,  872,
      872,  808,  866,  871,  872,  807,  939,  939,  942,  942,
      871,  939,  867,  942,  806,  872,  872,  872,  872,  867,
      804,  803, 1012,  947,  947, 1012, 1011,  936,  947, 1011,
     1013,  936,  943, 1013,  937,  939,  938,  942,  802,  939,
      800,  942,  938,  943,  943,  799, 1159,  798,  943, 1159,
      943,  797,  947,  936,  937,  796,  947,  795, 1077,  794,
      937, 1077,  938,  948,  948,  948,  948, 1012,  793, 1159,
      948, 1011,  943,  787, 1012, 1013,  943,  786,  785,  779,
      775,  948,  948,  948,  948,  949,  949,  949,  949, 1011,

     1014, 1014,  949, 1012,  767, 1014,  764, 1011, 1018, 1079,
     1079, 1013, 1079,  949,  949,  949,  949, 1017, 1017, 1018,
     1018,  761, 1017,  756, 1018,  755, 1018, 1022, 1022, 1014,
      750, 1077, 1022, 1078, 1080, 1138, 1078, 1080, 1138, 1077,
     1084, 1084,  746,  745,  743, 1084, 1017, 1014, 1018, 1085,
      738, 1078, 1078, 1078, 1079,  737, 1022, 1089, 1089,  734,
     1085, 1085, 1089,  733, 1017, 1085, 1018, 1085, 1142, 1084,
     1160, 1142, 1162, 1160, 1022, 1162,  732,  731, 1175, 1080,
     1079, 1175, 1177,  727, 1187, 1177, 1089, 1187, 1189, 1085,
      725, 1189,  723, 1205, 1205, 1138, 1205, 1080, 1244,  722,

      718, 1244, 1244, 1244,  716, 1080, 1138,  714, 1244,  713,
      712, 1261,  711, 1142, 1261, 1261, 1261, 1162, 1160, 1263,
     1162, 1261, 1263, 1263, 1263,  710,  709, 1177, 1142, 1263,
      708,  707,  705, 1189,  704,  703, 1175,  702, 1205, 1142,
     1177, 1160, 1268, 1162,  701, 1268, 1268, 1268,  700, 1175,
      699,  698, 1268, 1177,  697, 1187,  696,  695,  694, 1189,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,

     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228,

     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,

     1233, 1233, 1233, 1233, 1233, 1234, 1234,  693, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1235, 1283,  690,  689, 1283, 1283, 1283,  688,  687, 1285,
      686, 1283, 1285, 1285, 1285,  685,  682, 1235,  681, 1285,
     1235, 1235, 1235,  673,  672,  671,  668, 1235, 1236,  659,
     1236, 1236, 1303, 1236,  658, 1303, 1303, 1303, 1236, 1236,
      655, 1303, 1236, 1236, 1236, 1237,  632, 1237, 1237, 1237,
     1237, 1382, 1237,  627, 1382, 1382, 1382, 1237, 1237, 1237,

      626, 1237, 1237, 1237, 1238, 1238, 1238, 1238,  625,  613,
      612, 1387,  610, 1238, 1387, 1387, 1387,  609, 1238, 1238,
      607, 1238, 1238, 1238,  606, 1238, 1238, 1238, 1238,  604,
     1238, 1238, 1239,  601, 1239, 1239, 1423, 1239,  599, 1423,
     1423, 1423, 1239, 1239,  597,  596, 1239, 1239, 1239, 1240,
     1240, 1240, 1240,  595,  594,  593, 1428, 1428, 1240, 1428,
     1428, 1428,  590, 1240, 1240,  588, 1240, 1240, 1240,  586,
     1240, 1240, 1240, 1240,  584, 1240, 1240, 1241, 1241,  581,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,

     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1242, 1456,  578, 1242, 1456, 1456, 1456, 1242,
      575, 1242, 1242, 1242, 1242, 1242,  573,  572,  570, 1242,
     1242, 1242,  568, 1242, 1242, 1242,  567,  565,  563,  560,
     1242, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1245, 1368, 1245, 1245,
      556,  552,  549,  547, 1245,  546, 1368, 1245, 1245, 1245,
     1368, 1368,  545,  543, 1245, 1246, 1246, 1246, 1246, 1298,

      542, 1246, 1298, 1298, 1298,  539, 1415,  538,  535, 1298,
     1246,  529,  526, 1246,  525, 1415,  521,  519, 1246, 1415,
     1415, 1246, 1246, 1246, 1304,  518,  516, 1246, 1246, 1247,
     1247, 1247, 1247, 1304,  514,  511, 1304, 1304, 1304,  509,
      508,  505,  503,  499, 1247,  496, 1247, 1247, 1247,  495,
      494,  491, 1247,  490,  489, 1247, 1247, 1247,  485,  477,
      474,  470, 1247, 1248, 1248, 1248, 1248, 1338,  454, 1248,
     1338, 1338, 1338,  453,  449, 1391,  448, 1338, 1391, 1391,
     1391,  444,  443,  429,  423, 1391, 1248,  418,  414, 1248,
     1248, 1248,  406,  405,  402,  393, 1248, 1249, 1249,  390,

     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1250,  387,  385, 1250,  382,  374,  358, 1250,
      347, 1250, 1250, 1250, 1250, 1250,  345,  342,  340, 1250,
     1250, 1250,  339, 1250, 1250, 1250,  327,  320,  319,  316,
     1250, 1251, 1251,  315, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252,  310,  309,

     1252,  301,  298,  297, 1252,  292, 1252, 1252, 1252, 1252,
     1252,  288, 1252,  287, 1252, 1252, 1252,  284, 1252, 1252,
     1252, 1386,  280,  279,  276, 1252, 1253, 1253, 1253, 1253,
     1386,  271, 1253, 1386, 1386, 1386,  240,  226,  225,  224,
      220, 1253,  219,  215, 1253,  210,  207,  199,  195, 1253,
      188,  170, 1253, 1253, 1253,  166,  162,  153, 1253, 1253,
     1254, 1254, 1254, 1254,  139,  136,  130,  118,  114, 1254,
      104,   96,   95,   94,   89, 1254,    8, 1254, 1254,    7,
        0,    0,    0, 1254,    0,    0, 1254, 1254, 1254,    0,
        0,    0,    0, 1254, 1255, 1255, 1255, 1255, 1407,    0,

     1255, 1407, 1407, 1407,    0,    0, 1410,    0, 1407, 1410,
     1410, 1410,    0,    0,    0,    0, 1410, 1255,    0,    0,
     1255, 1255, 1255,    0,    0,    0,    0, 1255, 1256, 1413,
        0, 1256, 1413, 1413, 1413,    0,    0, 1256,    0, 1413,
     1256, 1256, 1256,    0,    0,    0,    0, 1256, 1257, 1257,
        0, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1258, 1258,    0, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,

     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1259, 1259,
        0, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1260,    0,    0, 1260,    0,    0,    0,
     1260,    0, 1260, 1260, 1260, 1260, 1260,    0,    0,    0,
     1260, 1260, 1260,    0, 1260, 1260, 1260,    0,    0,    0,
        0, 1260, 1262, 1414,    0, 1262, 1414, 1414, 1414,    0,
        0,    0,    0, 1414,    0, 1262,    0, 1437,    0, 1262,

     1437, 1437, 1437,    0,    0, 1262,    0, 1437, 1262, 1262,
     1262,    0,    0,    0,    0, 1262, 1264, 1264, 1264, 1264,
        0,    0, 1264,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1264, 1264,    0,    0,    0,    0, 1264,
        0,    0, 1264, 1264, 1264,    0,    0,    0,    0, 1264,
     1265, 1265, 1265, 1265,    0,    0, 1265,    0,    0,    0,
        0,    0,    0,    0,    0, 1265,    0,    0, 1265,    0,
        0,    0,    0, 1265,    0,    0, 1265, 1265, 1265,    0,
        0,    0, 1265, 1265, 1266, 1266, 1266, 1266,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1266,

        0, 1266, 1266,    0,    0,    0,    0, 1266,    0,    0,
     1266, 1266, 1266,    0,    0,    0,    0, 1266, 1267, 1267,
     1267, 1267,    0,    0, 1267,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1267,    0,    0, 1267, 1267, 1267,    0,    0,    0,
        0, 1267, 1269,    0, 1269,    0,    0,    0,    0,    0,
     1269,    0,    0, 1269, 1269, 1269,    0,    0,    0,    0,
     1269, 1270, 1270,    0, 1270,    0,    0,    0,    0,    0,
     1270,    0,    0, 1270, 1270, 1270,    0,    0,    0,    0,
     1270, 1271, 1271,    0, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271,    0, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1272,    0,    0, 1272,
        0,    0,    0,    0,    0, 1272,    0,    0, 1272, 1272,
     1272,    0,    0,    0,    0, 1272, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,    0,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1274, 1274,    0, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,

     1274, 1274, 1274, 1274,    0, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1275,    0,    0, 1275,
        0,    0,    0,    0,    0, 1275,    0,    0, 1275, 1275,
     1275,    0,    0,    0,    0, 1275, 1276, 1276,    0, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1277, 1277,    0, 1277,    0, 1277, 1277, 1277, 1277,
     1277, 1277, 1277,    0, 1277, 1277, 1277, 1277,    0, 1277,
     1277, 1277, 1277, 1277,    0, 1277,    0, 1277, 1277, 1277,

     1277, 1277, 1277, 1277, 1277, 1277, 1278,    0,    0, 1278,
        0,    0,    0,    0,    0, 1278,    0,    0,    0,    0,
     1278, 1278,    0, 1278,    0,    0,    0,    0,    0, 1278,
        0,    0, 1278, 1278, 1278, 1279, 1279,    0, 1279,    0,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,    0, 1279,
        0, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1280, 1280,    0, 1280,    0, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280,    0, 1280,    0, 1280, 1280, 1280, 1280,

     1280, 1280, 1280, 1280, 1280, 1281,    0,    0, 1281,    0,
        0,    0,    0,    0, 1281,    0,    0, 1281, 1281, 1281,
        0,    0,    0,    0, 1281, 1282, 1282,    0, 1282, 1282,
     1282, 1282, 1282, 1282, 1282,    0,    0, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,    0, 1282,
        0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1284,    0, 1284, 1284,    0,    0,    0,    0, 1284,    0,
        0, 1284, 1284, 1284,    0,    0,    0,    0, 1284, 1286,
        0, 1286, 1286,    0,    0,    0,    0, 1286,    0,    0,
     1286, 1286, 1286,    0,    0,    0,    0, 1286, 1287, 1287,

        0, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287,    0, 1287,    0, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1288,    0,    0, 1288,    0,    0,    0,
        0,    0, 1288,    0,    0, 1288, 1288, 1288,    0,    0,
        0,    0, 1288, 1289, 1289,    0, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,    0, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,    0, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290,
        0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

        0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290,    0, 1290,    0, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1291,    0,    0, 1291,    0,    0,    0,
     1291,    0, 1291,    0,    0, 1291, 1291, 1291,    0,    0,
        0,    0, 1291, 1292,    0, 1292, 1292, 1292, 1292, 1292,
        0,    0, 1292,    0, 1292,    0,    0, 1292, 1292, 1292,
        0,    0,    0,    0, 1292, 1293, 1293,    0, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
        0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
        0,    0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1295, 1295,    0, 1295, 1295,
     1295, 1295, 1295, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295,    0,    0, 1295, 1295, 1295,
        0,    0, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1296, 1296, 1296, 1296,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1296, 1296,    0, 1296, 1296, 1296,
        0, 1296, 1296, 1296, 1296,    0, 1296, 1296, 1297, 1297,

        0, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,
     1297, 1297, 1297, 1299, 1299,    0,    0,    0,    0, 1299,
        0,    0, 1299, 1299, 1299,    0,    0,    0,    0, 1299,
     1300,    0, 1300, 1300,    0, 1300,    0,    0,    0,    0,
     1300, 1300,    0,    0, 1300, 1300, 1300, 1301,    0,    0,
     1301,    0,    0,    0,    0,    0, 1301,    0,    0, 1301,
     1301, 1301, 1302,    0,    0, 1302,    0, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,

     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1305,    0, 1305,
     1305,    0, 1305,    0,    0,    0,    0, 1305, 1305,    0,
        0, 1305, 1305, 1305, 1306,    0,    0, 1306,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1306, 1306,    0,
     1306, 1306, 1306, 1306, 1307, 1307,    0, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,

        0,    0, 1308,    0,    0,    0, 1308,    0, 1308, 1308,
     1308, 1308, 1308,    0,    0,    0, 1308, 1308, 1308,    0,
     1308, 1308, 1308,    0,    0,    0,    0, 1308, 1309,    0,
        0, 1309,    0,    0,    0, 1309,    0, 1309,    0, 1309,
     1309, 1309,    0,    0,    0, 1309, 1309, 1309,    0, 1309,
     1309, 1309,    0,    0,    0,    0, 1309, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1311,    0, 1311, 1311,    0,    0,    0,    0,

     1311,    0,    0, 1311, 1311, 1311,    0,    0,    0,    0,
     1311, 1312,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1312,    0,
        0, 1312, 1312, 1312,    0,    0,    0,    0, 1312, 1313,
     1313, 1313, 1313,    0,    0, 1313,    0,    0,    0,    0,
        0,    0,    0,    0, 1313,    0,    0, 1313,    0,    0,
        0,    0, 1313,    0,    0, 1313, 1313, 1313,    0,    0,
        0, 1313, 1313, 1314, 1314, 1314, 1314,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1314,    0,
     1314, 1314, 1314,    0,    0,    0, 1314,    0,    0, 1314,

     1314, 1314,    0,    0,    0,    0, 1314, 1315, 1315, 1315,
     1315,    0,    0, 1315,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1315,    0,    0, 1315, 1315, 1315,    0,    0,    0,    0,
     1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316,    0, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1317,    0, 1317,    0,
        0,    0, 1317,    0,    0, 1317, 1317, 1317,    0,    0,
        0,    0, 1317, 1318, 1318,    0, 1318, 1318, 1318, 1318,

     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319,    0,
        0, 1319,    0,    0,    0, 1319,    0, 1319, 1319, 1319,
     1319, 1319,    0,    0,    0, 1319, 1319, 1319,    0, 1319,
     1319, 1319,    0,    0,    0,    0, 1319, 1320,    0,    0,
     1320,    0,    0,    0, 1320,    0, 1320,    0, 1320, 1320,
     1320,    0,    0,    0, 1320, 1320, 1320,    0, 1320, 1320,
     1320,    0,    0,    0,    0, 1320, 1321, 1321,    0, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,

     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1322, 1322,    0, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323,    0,    0,
     1323,    0,    0,    0, 1323,    0, 1323, 1323, 1323, 1323,
     1323,    0, 1323,    0, 1323, 1323, 1323,    0, 1323, 1323,
     1323,    0,    0,    0,    0, 1323, 1324,    0,    0, 1324,
        0,    0,    0, 1324,    0, 1324,    0, 1324, 1324, 1324,

        0,    0,    0, 1324, 1324, 1324,    0, 1324, 1324, 1324,
        0,    0,    0,    0, 1324, 1325, 1325, 1325, 1325,    0,
        0, 1325,    0,    0,    0,    0,    0,    0,    0,    0,
     1325,    0,    0, 1325,    0,    0,    0,    0, 1325,    0,
        0, 1325, 1325, 1325,    0,    0,    0, 1325, 1325, 1326,
     1326, 1326, 1326,    0,    0,    0,    0,    0, 1326,    0,
        0,    0,    0,    0, 1326,    0, 1326, 1326,    0,    0,
        0,    0, 1326,    0,    0, 1326, 1326, 1326,    0,    0,
        0,    0, 1326, 1327, 1327, 1327, 1327,    0,    0, 1327,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1327,    0,    0, 1327,
     1327, 1327,    0,    0,    0,    0, 1327, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,    0, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1329,    0,    0, 1329,    0,    0,    0,    0,
        0, 1329,    0,    0,    0,    0,    0,    0,    0, 1329,
        0,    0,    0,    0,    0, 1329,    0,    0, 1329, 1329,
     1329,    0,    0,    0,    0, 1329, 1330,    0,    0, 1330,
        0,    0,    0,    0,    0, 1330,    0,    0, 1330, 1330,

     1330,    0,    0,    0,    0, 1330, 1331, 1331,    0, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1332, 1332,    0, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333,    0, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,

     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1334,    0,    0, 1334,    0,    0,    0, 1334,    0,
     1334, 1334, 1334, 1334, 1334,    0,    0,    0, 1334, 1334,
     1334,    0, 1334, 1334, 1334,    0,    0,    0,    0, 1334,
     1335,    0,    0, 1335,    0,    0,    0, 1335,    0, 1335,
        0, 1335, 1335, 1335,    0,    0,    0, 1335, 1335, 1335,
        0, 1335, 1335, 1335,    0,    0,    0,    0, 1335, 1336,
        0,    0, 1336,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1336,    0,    0,    0, 1336,    0,    0,    0,
        0,    0, 1336,    0,    0, 1336, 1336, 1336,    0,    0,

        0,    0, 1336, 1337, 1337, 1337, 1337,    0,    0, 1337,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1337, 1337,    0,    0,    0,    0, 1337,    0,    0, 1337,
     1337, 1337,    0,    0,    0,    0, 1337, 1339, 1339, 1339,
     1339,    0,    0, 1339,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1339, 1339,    0,    0,    0,    0,
     1339,    0,    0, 1339, 1339, 1339,    0,    0,    0,    0,
     1339, 1340, 1340, 1340, 1340,    0,    0, 1340,    0,    0,
        0,    0,    0,    0,    0,    0, 1340,    0,    0, 1340,
        0,    0,    0,    0, 1340,    0,    0, 1340, 1340, 1340,

        0,    0,    0, 1340, 1340, 1341, 1341, 1341, 1341,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1341,    0, 1341, 1341,    0,    0,    0,    0, 1341,    0,
        0, 1341, 1341, 1341,    0,    0,    0,    0, 1341, 1342,
     1342, 1342, 1342,    0,    0, 1342,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1342,    0,    0, 1342, 1342, 1342,    0,    0,
        0,    0, 1342, 1343,    0,    0,    0,    0,    0, 1343,
        0,    0, 1343, 1343, 1343,    0,    0,    0,    0, 1343,
     1344,    0, 1344,    0,    0,    0,    0,    0, 1344,    0,

        0, 1344, 1344, 1344,    0,    0,    0,    0, 1344, 1345,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1345,    0,    0, 1345,
     1345, 1345,    0,    0,    0,    0, 1345, 1346, 1346,    0,
     1346,    0,    0,    0,    0,    0, 1346,    0,    0, 1346,
     1346, 1346,    0,    0,    0,    0, 1346, 1347, 1347,    0,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,    0,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1348,    0,    0, 1348,    0,    0,    0,    0,

        0, 1348,    0,    0, 1348, 1348, 1348,    0,    0,    0,
        0, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349,    0, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,    0,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
        0, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1351,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1351,

        0,    0, 1351, 1351, 1351,    0,    0,    0,    0, 1351,
     1352,    0,    0, 1352,    0,    0,    0,    0,    0, 1352,
        0,    0, 1352, 1352, 1352,    0,    0,    0,    0, 1352,
     1353, 1353,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1354, 1354,    0, 1354,    0,
     1354, 1354, 1354, 1354, 1354, 1354, 1354,    0, 1354, 1354,
     1354, 1354,    0, 1354, 1354, 1354, 1354, 1354,    0, 1354,
        0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,

     1355,    0,    0, 1355,    0,    0,    0,    0,    0, 1355,
        0,    0,    0,    0, 1355, 1355,    0, 1355,    0,    0,
        0,    0,    0, 1355,    0,    0, 1355, 1355, 1355, 1356,
     1356,    0, 1356,    0, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356,    0, 1356,    0, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1357, 1357,    0, 1357,    0, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357,    0, 1357,    0,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1358,

        0,    0, 1358,    0,    0,    0,    0,    0, 1358,    0,
        0, 1358, 1358, 1358,    0,    0,    0,    0, 1358, 1359,
     1359,    0, 1359, 1359, 1359, 1359, 1359, 1359, 1359,    0,
        0, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359,    0, 1359,    0, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1360,    0, 1360, 1360,    0,    0,
        0,    0, 1360,    0,    0, 1360, 1360, 1360,    0,    0,
        0,    0, 1360, 1361,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1361,    0,    0, 1361, 1361, 1361,    0,    0,    0,    0,

     1361, 1362,    0, 1362, 1362,    0,    0,    0,    0, 1362,
        0,    0, 1362, 1362, 1362,    0,    0,    0,    0, 1362,
     1363,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1363,    0,    0,
     1363, 1363, 1363,    0,    0,    0,    0, 1363, 1364, 1364,
        0, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364,    0, 1364,    0, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1365,    0,    0, 1365,    0,    0,    0,
        0,    0, 1365,    0,    0, 1365, 1365, 1365,    0,    0,

        0,    0, 1365, 1366, 1366,    0, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,    0, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,    0, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1367, 1367,
        0, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
        0, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367,    0, 1367,    0, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1369,    0,    0,    0,    0,    0,    0,
        0, 1369,    0, 1369, 1369, 1369, 1369, 1369,    0,    0,
     1369,    0, 1369,    0,    0, 1369, 1369, 1369,    0,    0,

        0,    0, 1369, 1370,    0, 1370, 1370, 1370, 1370, 1370,
        0,    0, 1370,    0, 1370,    0,    0, 1370, 1370, 1370,
        0,    0,    0,    0, 1370, 1371,    0,    0, 1371,    0,
        0,    0, 1371,    0, 1371,    0,    0, 1371, 1371, 1371,
        0,    0,    0,    0, 1371, 1372, 1372,    0, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
        0, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
        0,    0, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,

     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1374, 1374,    0, 1374, 1374,
     1374, 1374, 1374, 1374,    0, 1374, 1374, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374,    0,    0, 1374, 1374, 1374,
        0,    0, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,
     1375, 1375,    0,    0,    0,    0, 1375,    0,    0, 1375,
     1375, 1375,    0,    0,    0,    0, 1375, 1376, 1376,    0,
     1376, 1376, 1376, 1376,    0, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,

     1376, 1376, 1377, 1377,    0, 1377,    0,    0,    0,    0,
        0, 1377,    0,    0, 1377, 1377, 1377, 1378,    0, 1378,
     1378,    0, 1378,    0,    0,    0,    0, 1378, 1378,    0,
        0, 1378, 1378, 1378, 1379,    0,    0, 1379,    0, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380,
     1380,    0, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,

     1380, 1380, 1380, 1380, 1381,    0,    0, 1381,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1381,    0,    0,
     1381, 1381, 1381, 1383,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1383,    0, 1383,    0, 1383, 1383,    0,
        0,    0,    0, 1383,    0,    0, 1383, 1383, 1383,    0,
        0, 1383, 1384,    0,    0, 1384,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1384,    0,    0, 1384, 1384,
     1384, 1384, 1385, 1385,    0, 1385, 1385, 1385, 1385, 1385,

     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1388,    0,    0,
     1388,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1388, 1388,    0, 1388, 1388, 1388, 1388, 1389,    0,    0,
     1389,    0,    0,    0, 1389,    0, 1389, 1389, 1389, 1389,
     1389,    0,    0,    0, 1389, 1389, 1389,    0, 1389, 1389,
     1389,    0,    0,    0,    0, 1389, 1390,    0,    0, 1390,
        0,    0,    0, 1390,    0, 1390, 1390, 1390, 1390, 1390,

        0,    0,    0, 1390, 1390, 1390,    0, 1390, 1390, 1390,
        0,    0,    0,    0, 1390, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1393,    0, 1393,    0,    0,    0, 1393,    0,    0, 1393,
     1393, 1393,    0,    0,    0,    0, 1393, 1394,    0,    0,
     1394,    0,    0,    0, 1394,    0, 1394, 1394, 1394, 1394,
     1394,    0,    0,    0, 1394, 1394, 1394,    0, 1394, 1394,
     1394,    0,    0,    0,    0, 1394, 1395,    0,    0, 1395,

        0,    0,    0, 1395,    0, 1395, 1395, 1395, 1395, 1395,
        0,    0,    0, 1395, 1395, 1395,    0, 1395, 1395, 1395,
        0,    0,    0,    0, 1395, 1396, 1396,    0, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1397, 1397,    0,    0, 1397,    0,    0,    0, 1397,    0,
     1397, 1397, 1397, 1397, 1397,    0, 1397,    0, 1397, 1397,
     1397,    0, 1397, 1397, 1397,    0,    0,    0,    0, 1397,
     1398, 1398,    0,    0, 1398,    0,    0,    0, 1398,    0,

     1398, 1398, 1398, 1398, 1398,    0, 1398,    0, 1398, 1398,
     1398,    0, 1398, 1398, 1398,    0,    0,    0,    0, 1398,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1400,    0,    0, 1400,    0,
        0,    0,    0,    0, 1400,    0,    0,    0,    0,    0,
        0,    0, 1400,    0,    0,    0,    0,    0, 1400,    0,
        0, 1400, 1400, 1400,    0,    0,    0,    0, 1400, 1401,
        0,    0, 1401,    0,    0,    0, 1401,    0, 1401, 1401,

     1401, 1401, 1401,    0,    0,    0, 1401, 1401, 1401,    0,
     1401, 1401, 1401,    0,    0,    0,    0, 1401, 1402,    0,
        0, 1402,    0,    0,    0, 1402,    0, 1402, 1402, 1402,
     1402, 1402,    0,    0,    0, 1402, 1402, 1402,    0, 1402,
     1402, 1402,    0,    0,    0,    0, 1402, 1403, 1403, 1403,
     1403,    0,    0, 1403,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1403, 1403,    0,    0,    0,    0,
     1403,    0,    0, 1403, 1403, 1403,    0,    0,    0,    0,
     1403, 1404, 1404, 1404, 1404,    0,    0, 1404,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1404,

        0,    0,    0,    0, 1404,    0,    0, 1404, 1404, 1404,
        0,    0,    0,    0, 1404, 1405, 1405, 1405, 1405,    0,
        0, 1405,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1405, 1405,    0,    0,    0,    0, 1405,    0,
        0, 1405, 1405, 1405,    0,    0,    0,    0, 1405, 1406,
        0,    0,    0,    0,    0, 1406,    0,    0, 1406, 1406,
     1406,    0,    0,    0,    0, 1406, 1408,    0, 1408,    0,
        0,    0,    0,    0, 1408,    0,    0, 1408, 1408, 1408,
        0,    0,    0,    0, 1408, 1409, 1409,    0, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409,    0, 1409, 1409,

     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1411,    0,    0,    0,    0,    0, 1411,    0,    0, 1411,
     1411, 1411,    0,    0,    0,    0, 1411, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412,    0, 1412, 1412, 1412, 1412,
     1412,    0, 1412, 1412,    0,    0, 1412, 1412, 1412, 1412,
     1412, 1412, 1416,    0,    0,    0,    0,    0,    0,    0,
     1416,    0, 1416, 1416, 1416, 1416, 1416,    0,    0, 1416,
        0, 1416,    0,    0, 1416, 1416, 1416,    0,    0,    0,

        0, 1416, 1417,    0,    0, 1417,    0,    0,    0, 1417,
        0, 1417,    0,    0, 1417, 1417, 1417,    0,    0,    0,
        0, 1417, 1418,    0, 1418, 1418, 1418, 1418, 1418,    0,
        0, 1418,    0, 1418,    0,    0, 1418, 1418, 1418,    0,
        0,    0,    0, 1418, 1419, 1419,    0, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
        0,    0, 1420,    0,    0,    0,    0,    0, 1420,    0,
        0, 1420, 1420, 1420, 1421,    0, 1421,    0, 1421, 1421,

        0, 1421,    0,    0,    0,    0, 1421, 1421,    0,    0,
     1421, 1421, 1421, 1422, 1422,    0, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1424,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1424,    0,
     1424,    0, 1424, 1424,    0,    0,    0,    0, 1424,    0,
        0, 1424, 1424, 1424,    0,    0, 1424, 1425,    0,    0,
     1425,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1425,    0,    0, 1425, 1425, 1425, 1425, 1426, 1426,    0,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1427, 1427,    0, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1429,    0,    0,
     1429,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1429, 1429,    0, 1429, 1429, 1429, 1429, 1430, 1430,    0,
     1430,    0,    0,    0,    0,    0,    0,    0,    0, 1430,
        0, 1430, 1430,    0, 1430, 1430,    0,    0,    0, 1430,
     1430,    0,    0, 1430, 1430, 1430,    0, 1430, 1431,    0,
        0, 1431,    0,    0,    0, 1431,    0, 1431, 1431, 1431,
     1431, 1431,    0,    0,    0, 1431, 1431, 1431,    0, 1431,
     1431, 1431,    0,    0,    0,    0, 1431, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,

     1432, 1432, 1433,    0,    0, 1433,    0,    0,    0, 1433,
        0, 1433, 1433, 1433, 1433, 1433,    0,    0,    0, 1433,
     1433, 1433,    0, 1433, 1433, 1433,    0,    0,    0,    0,
     1433, 1434, 1434,    0, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435,    0,    0,
     1435,    0,    0,    0, 1435,    0, 1435, 1435, 1435, 1435,
     1435,    0, 1435,    0, 1435, 1435, 1435,    0, 1435, 1435,
     1435,    0,    0,    0,    0, 1435, 1436,    0,    0, 1436,

        0,    0,    0, 1436,    0, 1436, 1436, 1436, 1436, 1436,
        0,    0,    0, 1436, 1436, 1436,    0, 1436, 1436, 1436,
        0,    0,    0,    0, 1436, 1438, 1438, 1438, 1438,    0,
        0, 1438,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1438, 1438,    0,    0,    0,    0, 1438,    0,
        0, 1438, 1438, 1438,    0,    0,    0,    0, 1438, 1439,
     1439, 1439, 1439,    0,    0, 1439,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1439,    0,    0,
        0,    0, 1439,    0,    0, 1439, 1439, 1439,    0,    0,
        0,    0, 1439, 1440,    0, 1440,    0,    0,    0,    0,

        0, 1440,    0,    0, 1440, 1440, 1440,    0,    0,    0,
        0, 1440, 1441, 1441,    0, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441,    0, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442,    0,    0,
        0,    0,    0, 1442,    0,    0, 1442, 1442, 1442,    0,
        0,    0,    0, 1442, 1443,    0,    0,    0,    0,    0,
        0,    0, 1443,    0, 1443, 1443, 1443, 1443, 1443,    0,
        0, 1443,    0, 1443,    0,    0, 1443, 1443, 1443,    0,
        0,    0,    0, 1443, 1444,    0, 1444, 1444, 1444, 1444,

     1444,    0,    0, 1444,    0, 1444,    0,    0, 1444, 1444,
     1444,    0,    0,    0,    0, 1444, 1445, 1445,    0, 1445,
        0,    0,    0,    0,    0, 1445,    0,    0, 1445, 1445,
     1445, 1446,    0, 1446,    0, 1446, 1446,    0, 1446,    0,
        0,    0,    0, 1446, 1446,    0,    0, 1446, 1446, 1446,
     1447, 1447,    0, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448,    0,
        0, 1448,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1448, 1448,    0,    0,    0,    0, 1448,    0,
        0, 1448, 1448, 1448,    0,    0,    0,    0, 1448, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449,    0, 1449, 1449,
     1449, 1449, 1449,    0, 1449, 1449,    0, 1449,    0, 1449,
     1449, 1449, 1449, 1449, 1450, 1450,    0, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,

     1451, 1451, 1451, 1451, 1451, 1451, 1451,    0, 1451, 1451,
     1451, 1451, 1451,    0, 1451, 1451,    0,    0,    0, 1451,
     1451, 1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452,    0, 1452, 1452, 1452, 1452, 1452,    0, 1452,
     1452,    0,    0,    0, 1452, 1452, 1452, 1452, 1452, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453,    0, 1453, 1453,
     1453, 1453, 1453,    0, 1453, 1453,    0,    0,    0, 1453,
     1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454,    0, 1454, 1454, 1454, 1454, 1454,    0, 1454,
     1454,    0,    0,    0, 1454, 1454, 1454, 1454, 1454, 1455,
     1455,    0, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2019 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QFile>
#include <QStack>
#include <QVector>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <cite.h>
#include <condparser.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <formula.h>
#include <index.h>
#include <language.h>
#include <membergroup.h>
#include <message.h>
#include <outputlist.h>
#include <parse_base.h>
#include <parse_cstyle.h>
#include <parse_md.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

// forward declarations
static bool handleBrief(const QString &str, const QStringList &list);
static bool handleFn(const QString &str, const QStringList &list);
static bool handleDef(const QString &str, const QStringList &list);
static bool handleOverload(const QString &str, const QStringList &list);
static bool handleEnum(const QString &str, const QStringList &list);
static bool handleDefGroup(const QString &str, const QStringList &list);
static bool handleAddToGroup(const QString &str, const QStringList &list);
static bool handleWeakGroup(const QString &str, const QStringList &list);
static bool handleNamespace(const QString &str, const QStringList &list);
static bool handlePackage(const QString &str, const QStringList &list);
static bool handleClass(const QString &str, const QStringList &list);
static bool handleHeaderFile(const QString &str, const QStringList &list);
static bool handleProtocol(const QString &str, const QStringList &list);
static bool handleCategory(const QString &str, const QStringList &list);
static bool handleUnion(const QString &str, const QStringList &list);
static bool handleStruct(const QString &str, const QStringList &list);;
static bool handleInterface(const QString &str, const QStringList &list);
static bool handleIdlException(const QString &str, const QStringList &list);
static bool handlePage(const QString &str, const QStringList &list);
static bool handleMainpage(const QString &str, const QStringList &list);
static bool handleFile(const QString &str, const QStringList &list);
static bool handleDir(const QString &str, const QStringList &list);
static bool handleExample(const QString &str, const QStringList &list);
static bool handleDetails(const QString &str, const QStringList &list);
static bool handleName(const QString &str, const QStringList &list);
static bool handleTodo(const QString &str, const QStringList &list);
static bool handleTest(const QString &str, const QStringList &list);
static bool handleBug(const QString &str, const QStringList &list);
static bool handleSubpage(const QString &str, const QStringList &list);
static bool handleDeprecated(const QString &str, const QStringList &list);
static bool handleXRefItem(const QString &str, const QStringList &list);
static bool handleRelated(const QString &str, const QStringList &list);
static bool handleRelatedAlso(const QString &str, const QStringList &list);
static bool handleMemberOf(const QString &str, const QStringList &list);
static bool handleRefItem(const QString &str, const QStringList &list);
static bool handleSection(const QString &str, const QStringList &list);
static bool handleAnchor(const QString &str, const QStringList &list);
static bool handleCite(const QString &str, const QStringList &list);
static bool handleFormatBlock(const QString &str, const QStringList &list);
static bool handleAddIndex(const QString &str, const QStringList &list);;
static bool handleIf(const QString &str, const QStringList &list);
static bool handleIfNot(const QString &str, const QStringList &list);
static bool handleElseIf(const QString &str, const QStringList &list);
static bool handleElse(const QString &str, const QStringList &list);
static bool handleEndIf(const QString &str, const QStringList &list);
static bool handleIngroup(const QString &str, const QStringList &list);
static bool handleNoSubGrouping(const QString &str, const QStringList &list);
static bool handleShowInitializer(const QString &str, const QStringList &list);
static bool handleHideInitializer(const QString &str, const QStringList &list);
static bool handleCallgraph(const QString &str, const QStringList &list);
static bool handleHideCallgraph(const QString &str, const QStringList &list);
static bool handleCallergraph(const QString &str, const QStringList &list);
static bool handleHideCallergraph(const QString &str, const QStringList &list);
static bool handleReferencedByRelation(const QString &str, const QStringList &list);
static bool handleHideReferencedByRelation(const QString &str, const QStringList &list);
static bool handleReferencesRelation(const QString &str, const QStringList &list);
static bool handleHideReferencesRelation(const QString &str, const QStringList &list);
static bool handleInternal(const QString &str, const QStringList &list);
static bool handleLineBr(const QString &str, const QStringList &list);
static bool handleStatic(const QString &str, const QStringList &list);
static bool handlePure(const QString &str, const QStringList &list);
static bool handlePrivate(const QString &str, const QStringList &list);
static bool handlePrivateSection(const QString &str, const QStringList &list);
static bool handleProtected(const QString &str, const QStringList &list);
static bool handleProtectedSection(const QString &str, const QStringList &list);
static bool handlePublic(const QString &str, const QStringList &list);
static bool handlePublicSection(const QString &str, const QStringList &list);
static bool handleToc(const QString &str, const QStringList &list);
static bool handleInherit(const QString &str, const QStringList &list);
static bool handleExtends(const QString &str, const QStringList &list);
static bool handleCopyDoc(const QString &str, const QStringList &list);
static bool handleCopyBrief(const QString &str, const QStringList &list);
static bool handleCopyDetails(const QString &str, const QStringList &list);
static bool handleParBlock(const QString &str, const QStringList &list);
static bool handleEndParBlock(const QString &str, const QStringList &list);
static void handleGuard(const QString &str, const QStringList &list);
static bool handleParam(const QString &str, const QStringList &list);
static bool handleRetval(const QString &str, const QStringList &list);

static void checkFormula();

using DocCmdFunc = bool (*)(const QString &str, const QStringList &list);

struct DocCmdMap
{
   DocCmdMap(const char *x1, DocCmdFunc x2, bool x3) {
      cmdName   = QString::fromUtf8(x1);
      handler   = x2;
      endsBrief = x3;
   }

   QString cmdName;
   DocCmdFunc handler;
   bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            false },
  { "short",           &handleBrief,            false },
  { "fn",              &handleFn,               false },
  { "var",             &handleFn,               false },
  { "typedef",         &handleFn,               false },
  { "property",        &handleFn,               false },
  { "def",             &handleDef,              false },
  { "overload",        &handleOverload,         false },
  { "enum",            &handleEnum,             false },
  { "defgroup",        &handleDefGroup,         false },
  { "group",           &handleDefGroup,         false },
  { "addtogroup",      &handleAddToGroup,       false },
  { "weakgroup",       &handleWeakGroup,        false },
  { "namespace",       &handleNamespace,        false },
  { "package",         &handlePackage,          false },
  { "class",           &handleClass,            false },
  { "headerfile",      &handleHeaderFile,       false },
  { "protocol",        &handleProtocol,         false },
  { "category",        &handleCategory,         false },
  { "union",           &handleUnion,            false },
  { "struct",          &handleStruct,           false },
  { "interface",       &handleInterface,        false },
  { "idlexcept",       &handleIdlException,     false },
  { "page",            &handlePage,             false },
  { "mainpage",        &handleMainpage,         false },
  { "file",            &handleFile,             false },
  { "dir",             &handleDir,              false },
  { "example",         &handleExample,          false },
  { "details",         &handleDetails,          true  },
  { "name",            &handleName,             false },
  { "todo",            &handleTodo,             false }, // end brief will be done differently
  { "test",            &handleTest,             false }, // end brief will be done differently
  { "bug",             &handleBug,              false }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       false }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         false }, // end brief will be done differently
  { "related",         &handleRelated,          true  },
  { "relates",         &handleRelated,          true  },
  { "relatedalso",     &handleRelatedAlso,      true  },
  { "relatesalso",     &handleRelatedAlso,      true  },
  { "parblock",        &handleParBlock,         true  },
  { "endparblock",     &handleEndParBlock,      true  },
  { "refitem",         &handleRefItem,          true  },
  { "cite",            &handleCite,             false },
  { "subpage",         &handleSubpage,          true  },
  { "section",         &handleSection,          true  },
  { "subsection",      &handleSection,          true  },
  { "subsubsection",   &handleSection,          true  },
  { "paragraph",       &handleSection,          true  },
  { "anchor",          &handleAnchor,           true  },
  { "verbatim",        &handleFormatBlock,      true  },
  { "latexonly",       &handleFormatBlock,      false },
  { "htmlonly",        &handleFormatBlock,      false },
  { "xmlonly",         &handleFormatBlock,      false },
  { "docbookonly",     &handleFormatBlock,      false },
  { "rtfonly",         &handleFormatBlock,      false },
  { "manonly",         &handleFormatBlock,      false },
  { "dot",             &handleFormatBlock,      true  },
  { "msc",             &handleFormatBlock,      true  },
  { "startuml",        &handleFormatBlock,      true  },
  { "code",            &handleFormatBlock,      true  },
  { "addindex",        &handleAddIndex,         false },
  { "if",              &handleIf,               false },
  { "ifnot",           &handleIfNot,            false },
  { "elseif",          &handleElseIf,           false },
  { "else",            &handleElse,             false },
  { "endif",           &handleEndIf,            false },
  { "ingroup",         &handleIngroup,          false },
  { "nosubgrouping",   &handleNoSubGrouping,    false },
  { "showinitializer", &handleShowInitializer,  false },
  { "hideinitializer", &handleHideInitializer,  false },
  { "callgraph",       &handleCallgraph,        false },
  { "hidecallgraph",   &handleHideCallgraph,    false },
  { "callergraph",     &handleCallergraph,      false },
  { "hidecallergraph", &handleHideCallergraph,  false },
  { "showrefby",       &handleReferencedByRelation,     false },
  { "hiderefby",       &handleHideReferencedByRelation, false },
  { "showrefs",        &handleReferencesRelation,       false },
  { "hiderefs",        &handleHideReferencesRelation,   false },
  { "internal",        &handleInternal,         true  },
  { "_linebr",         &handleLineBr,           false },
  { "static",          &handleStatic,           false },
  { "pure",            &handlePure,             false },
  { "private",         &handlePrivate,          false },
  { "privatesection",  &handlePrivateSection,   false },
  { "protected",       &handleProtected,        false },
  { "protectedsection",&handleProtectedSection, false },
  { "public",          &handlePublic,           false },
  { "publicsection",   &handlePublicSection,    false },
  { "tableofcontents", &handleToc,              false },
  { "inherit",         &handleInherit,          true  },
  { "extends",         &handleExtends,          true  },
  { "implements",      &handleExtends,          true  },
  { "memberof",        &handleMemberOf,         true  },
  { "arg",             0,                       true  },
  { "attention",       0,                       true  },
  { "author",          0,                       true  },
  { "authors",         0,                       true  },
  { "copydoc",         &handleCopyDoc,          true  },
  { "copybrief",       &handleCopyBrief,        false },
  { "copydetails",     &handleCopyDetails,      true  },
  { "copyright",       0,                       true  },
  { "date",            0,                       true  },
  { "dotfile",         0,                       true  },
  { "htmlinclude",     0,                       false },
  { "image",           0,                       true  },
  { "include",         0,                       true  },
  { "includelineno",   0,                       true  },
  { "invariant",       0,                       true  },
  { "latexinclude",    0,                       false },
  { "li",              0,                       true  },
  { "line",            0,                       true  },
  { "note",            0,                       true  },
  { "par",             0,                       true  },
  { "param",           &handleParam,            true  },
  { "tparam",          0,                       true  },
  { "post",            0,                       true  },
  { "pre",             0,                       true  },
  { "remark",          0,                       true  },
  { "remarks",         0,                       true  },
  { "result",          0,                       true  },
  { "return",          0,                       true  },
  { "returns",         0,                       true  },
  { "exception",       0,                       true  },
  { "retval",          &handleRetval,           true  },
  { "sa",              0,                       true  },
  { "see",             0,                       true  },
  { "since",           0,                       true  },
  { "snippet",         0,                       true  },
  { "snippetlineno",   0,                       true  },
  { "throw",           0,                       true  },
  { "throws",          0,                       true  },
  { "until",           0,                       true  },
  { "verbinclude",     0,                       false },
  { "version",         0,                       true  },
  { "warning",         0,                       true  },
  { 0, 0, false }
};

//  Maps a command name (as found in a comment block) onto a specific handler function
class DocCmdMapper
{
  public:
    struct Cmd {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const QString &name) {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance() {
      delete s_instance;
      s_instance = nullptr;
    }

  private:
    static DocCmdMapper *instance() {
      if (s_instance == nullptr) {
         s_instance = new DocCmdMapper;
      }

      return s_instance;
   }

   DocCmdMapper() {
      DocCmdMap *p = docCmdMap;

      while (! p->cmdName.isEmpty()) {
         if (m_map.contains(p->cmdName)) {
            err("DocCmdMapper: command %s already added\n", csPrintable(p->cmdName));
            Doxy_Work::stopDoxyPress();
         }

         Cmd *cmd       = new Cmd;
         cmd->func      = p->handler;
         cmd->endsBrief = p->endsBrief;

         m_map.insert(p->cmdName, cmd);
         p++;
      }
   }

   Cmd *find(const QString &name) {
      return m_map.value(name);
   }

   QHash<QString, Cmd *> m_map;
   static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance = 0;

#define YY_NEVER_INTERACTIVE 1

enum XRefKind {
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext {
  OutputMainDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType {
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
 public:
   GuardedSection(bool enabled, bool parentVisible)
      : m_enabled(enabled), m_parentVisible(parentVisible) {}

   bool isEnabled() const {
      return m_enabled;
   }

   bool parentVisible() const {
      return m_parentVisible;
   }

 private:
   bool m_enabled;
   bool m_parentVisible;
};

void openGroup(QSharedPointer<Entry> e, const QString &file, int line);
void closeGroup(QSharedPointer<Entry> e, const QString &file, int line, bool foundInline = false);
void initGroupInfo(QSharedPointer<Entry> e);
static void groupAddDocs(QSharedPointer<Entry> e);

static QString          s_inputString;         // input string
static int              s_inputPosition;       // read pointer
static int              s_prevPosition;
static char            *s_bufferPosition;

static QString          yyFileName;            // file name that is read from
static int              yyLineNr;              // line number in the input
static bool             inBody;                // was the comment found inside the body of a function?
static OutputContext    inContext;             // are we inside the brief, details or xref part
static bool             briefEndsAtDot;        // does the brief description stop at a dot?
static QString          formulaText;           // Running text of a formula
static QString          formulaEnv;            // environment name
static int              formulaNewLines;       // amount of new lines in the formula

static QString          s_outputXRef;          // tmp argument of todo/test/../xrefitem commands
static QString          blockName;             // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;              // kind of cross-reference command
static XRefKind         newXRefKind;
static GuardType        guardType;             // kind of guard for conditional section
static bool             enabledSectionFound;
static QString          functionProto;         // function prototype

static bool             s_needNewEntry;
static int              s_docBlockContext;

static QString          s_sectionLabel;
static QString          s_sectionTitle;
static int              s_sectionLevel;
static QString          xrefItemKey;
static QString          newXRefItemKey;
static QString          xrefItemTitle;
static QString          xrefListTitle;
static Protection       protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             s_parseMore;

static int              s_condCount;
static int              s_commentCount;
static QString          s_spaceBeforeCmd;
static QString          s_spaceBeforeIf;
static QString          s_copyDocArg;
static QString          s_guardExpr;
static int              s_roundCount;
static bool             s_insideParBlock;

static int              s_memberGroupId = DOX_NOGROUP;
static QString          s_memberGroupHeader;
static QString          s_memberGroupDocs;
static QString          s_memberGroupRelates;
static QString          s_compoundName;

static bool             s_internalDocs;
static bool             s_processInternalDocs = false;

static ParserInterface        *langParser;        // the language parser calling us

static QSharedPointer<Entry>  s_docsEntry;        // which entry
static EntryKey               s_docsEnum;         // which enum in EntryKey (brief, main, inbody)

static QStack<GuardedSection> s_guards;           // tracks nested conditional sections (if, ifnot, ..)
static QSharedPointer<Entry>  current;            // working entry

static QStack<QSharedPointer<Grouping>> s_autoGroupStack;

static void initParser()
{
   s_sectionLabel.resize(0);
   s_sectionTitle.resize(0);
   s_memberGroupHeader.resize(0);

   s_insideParBlock = false;
   s_internalDocs   = Config::getBool("internal-docs");
}

static bool getDocSectionName(int s)
{
  switch(s) {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return true;
    default:
      return false;
  }
}

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (getDocSectionName(current->section)) {
    return true;

  } else {
    s_needNewEntry     = true;
    current->section   = s;
    current->startLine = yyLineNr;

    current->setData(EntryKey::File_Name, yyFileName);
    return false;
  }
}
static void lineCount()
{
  for (const char *c = commentscanYYtext ; *c ; ++c) {
    yyLineNr += (*c == '\n') ;
  }
}

static QString stripQuotes(const QString &s)
{
   QString name = s;

   if (name.isEmpty()) {
      return name;
   }

   if (name.at(0) == '"' && name.at(name.length() - 1) == '"') {
      name = name.mid(1, name.length() - 2);
   }

   return name;
}

static void addXRefItem(const QString &listName, const QString &itemTitle, const QString &listTitle, bool append)
{
   QSharedPointer<Entry> docEntry = current; // inBody && previous ? previous : current;

   if (listName.isEmpty()) {
      return;
   }

   auto refList = Doxy_Globals::xrefLists.find(listName);

   if (refList == Doxy_Globals::xrefLists.end()) {
      // new list
      Doxy_Globals::xrefLists.insert(listName, RefList(listName, listTitle, itemTitle));
      refList = Doxy_Globals::xrefLists.find(listName);
   }

   ListItemInfo *listItem = nullptr;

   for (auto &item : docEntry->m_specialLists) {
      listItem = &item;

      if (listItem->type == listName) {
         break;
      }
   }

   if (listItem && append) {
      // already found item of same type just before this one

      RefItem *item = refList->getRefItem(listItem->itemId);
      assert(item != 0);

      item->text += " <p>";
      item->text += s_outputXRef;

   } else {
      // new item

      int itemId  = refList->addRefItem();

      // if we have already an item from the same list type (e.g. a second @todo)
      // in the same Entry (i.e. lii!=0) then we reuse its link anchor.

      QString anchorLabel = QString("_%1%2").formatArg(listName).formatArg(itemId, 6, 10, QChar('0'));

      RefItem *item = refList->getRefItem(itemId);
      assert(item != 0);

      item->text       = s_outputXRef;
      item->listAnchor = anchorLabel;

      docEntry->addSpecialListItem(listName, itemId);

      QString cmdString = QString(" \\xrefitem %1 %2.").formatArg(listName).formatArg(itemId);

      if (inBody) {
         docEntry->appendData(EntryKey::Inbody_Docs, cmdString);
      } else {
         docEntry->appendData(EntryKey::Main_Docs,   cmdString);
      }

      QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorLabel);

      if (si) {
         if (si->lineNr != -1) {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s, line %d)",
                  csPrintable(anchorLabel), csPrintable(si->fileName), si->lineNr);

         } else {
            warn(listName, yyLineNr, "Multiple use of section label '%s', (first occurrence: %s)",
                  csPrintable(anchorLabel), csPrintable(si->fileName));
         }

      } else {
         si = QMakeShared<SectionInfo>(listName, yyLineNr, anchorLabel, s_sectionTitle, SectionInfo::Anchor, s_sectionLevel);
         Doxy_Globals::sectionDict.insert(anchorLabel, si);
         docEntry->m_anchors.append(*si);
      }
   }

   s_outputXRef.clear();
}

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QString addFormula()
{
   QString formLabel;
   QString fText = formulaText.simplified();

   auto f = Doxy_Globals::formulaDict.find(fText);

   if (f == Doxy_Globals::formulaDict.end()) {
      Formula temp = Formula(fText);

      Doxy_Globals::formulaList.append(temp);
      Doxy_Globals::formulaDict.insert(fText, temp);

      formLabel = QString("\\form#%1").formatArg(temp.getId());

      Doxy_Globals::formulaNameDict.insert(formLabel, temp);
      f = Doxy_Globals::formulaDict.find(fText);

   } else {
      formLabel = QString("\\form#%1").formatArg(f->getId());

   }

   for (int i = 0; i < formulaNewLines; i++) {
      formLabel += "@_fakenl";   // add fake newlines to
   }

   // keep the warnings correctly aligned
   return formLabel;
}

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level >= 0 && level < 5) {
      return (SectionInfo::SectionType)level;
   }

   return SectionInfo::Anchor;
}

static void addSection()
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(s_sectionLabel);

   if (si) {
      if (si->lineNr != -1) {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName), si->lineNr);

      } else {
         warn(yyFileName, yyLineNr, "Multiple use of section label '%s' while adding section, (first occurrence: %s)",
                  csPrintable(s_sectionLabel), csPrintable(si->fileName));
      }

   } else {
      // create a new section element
      s_sectionTitle += QString::fromUtf8(commentscanYYtext).trimmed();

      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, s_sectionLabel, s_sectionTitle,
                  sectionLevelToType(s_sectionLevel), s_sectionLevel);

      // add section to this entry
      current->m_anchors.append(*si);

      // add section to the global dictionary
      Doxy_Globals::sectionDict.insert(s_sectionLabel, si);

      // for a section the si->fileName is the physical file name. this will be replaced with the section name
      // in doctokenizer processSection()
   }
}

static void addCite()
{
   QString text = QString::fromUtf8(commentscanYYtext);
   if (text.startsWith('"')) {
      text.chop(1);
      text = text.mid(1);
   }

   Doxy_Globals::citeDict.insert(text);
}

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QString &s)
{
   uint len = s.length();

   int i = len - 1;
   QChar c;

   while (i >= 0 && ((c = s.at(i)) == ' ' || c == '\t' || c == '\r')) {
      i--;
   }

   if (i != len - 1) {
      // string up to and including char at pos i and \0 terminator
      s.resize(i + 2);
   }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
   bool xrefAppendToPrev = xrefAppendFlag;

   // determine append flag for the next item (i.e. the end of this item)
   xrefAppendFlag = ! inBody &&
                    inContext == OutputXRef && ctx == OutputXRef &&    // two consecutive xref items
                    newXRefKind == xrefKind &&                         // of the same kind
                    (xrefKind != XRef_Item ||
                    newXRefItemKey == xrefItemKey);                    // with the same key if \xrefitem

   if (inContext == OutputXRef) {

      // end of XRef section => add the item
      // See if we can append this new xref item to the previous one.
      // We know this at the start of the next item of the same
      // type and need to remember this until the end of that item.

    switch(xrefKind) {
         case XRef_Todo:
            addXRefItem("todo", theTranslator->trTodo(), theTranslator->trTodoList(), xrefAppendToPrev);
            break;

         case XRef_Test:
            addXRefItem("test", theTranslator->trTest(), theTranslator->trTestList(), xrefAppendToPrev);
            break;

         case XRef_Bug:
            addXRefItem("bug", theTranslator->trBug(), theTranslator->trBugList(), xrefAppendToPrev);
            break;

         case XRef_Deprecated:
            // ensure the current entry is marked
            current->m_traits.setTrait(Entry::Virtue::Deprecated);

            addXRefItem("deprecated", theTranslator->trDeprecated(), theTranslator->trDeprecatedList(), xrefAppendToPrev);
            break;

         case XRef_Item:
            // user defined list
            addXRefItem(xrefItemKey, xrefItemTitle, xrefListTitle, xrefAppendToPrev);
            break;

         case XRef_None:
            assert(0);
            break;
      }
   }

  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;

   if (inContext != OutputXRef && inBody) {
      inContext = OutputInbody;
   }

  switch(inContext) {
      case OutputMainDoc:
         if (oldContext != inContext) {

            QString tmpDocs = current->getData(EntryKey::Main_Docs);
            stripTrailingWhiteSpace(tmpDocs);
            current->setData(EntryKey::Main_Docs, tmpDocs);

            if (current->getData(EntryKey::MainDocs_File).isEmpty()) {
               current->setData(EntryKey::MainDocs_File, yyFileName);
               current->docLine = yyLineNr;
            }
         }

         s_docsEntry = current;
         s_docsEnum  = EntryKey::Main_Docs;

         break;

      case OutputBrief:
         if (oldContext != inContext) {

            if (current->getData(EntryKey::Brief_File).isEmpty()) {
               current->setData(EntryKey::Brief_File,   yyFileName);
               current->briefLine = yyLineNr;
            }
         }

         if (current->getData(EntryKey::Brief_Docs).trimmed().isEmpty())  {
            // only want one brief description even if multiple are given
            s_docsEntry = current;
            s_docsEnum  = EntryKey::Brief_Docs;

         } else {
            s_docsEntry  = current;
            s_docsEnum   = EntryKey::Main_Docs;

            inContext    = OutputMainDoc;             // need to switch to detailed docs
         }
         break;

      case OutputInbody:
         s_docsEntry = current;
         s_docsEnum  = EntryKey::Inbody_Docs;
         break;

      case OutputXRef:
         // indicates s_outputXRef should be used for the output string
         s_docsEntry = QSharedPointer<Entry>();

         break;
   }
}

static void addAnchor(const QString &anchorName)
{
   QSharedPointer<SectionInfo> si = Doxy_Globals::sectionDict.find(anchorName);

   if (si) {
      // anchor name already exists
      si->dupAnchor_cnt++;

   } else {
      // title is empty, level is zero
      si = QMakeShared<SectionInfo>(yyFileName, yyLineNr, anchorName, QString(""), SectionInfo::Anchor, 0);
      si->dupAnchor_fName = yyFileName;

      Doxy_Globals::sectionDict.insert(anchorName, si);
      current->m_anchors.append(*si);
   }
}

// add a string to one of the three doc outputs
static void addToOutput(const QString &str)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += str;

   } else {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void addToOutput(QChar c)
{
   if (s_docsEntry == nullptr) {
      // indicates s_outputXRef should be used for the output string
      s_outputXRef += c;

   } else {
      s_docsEntry->appendData(s_docsEnum, c);
   }
}

static void endBrief(bool isOutput = true)
{
   if (! current->getData(EntryKey::Brief_Docs).trimmed().isEmpty()) {
      // only go to the detailed description if we found some brief description and not just whitespace

      briefEndsAtDot = false;
      setOutput(OutputMainDoc);

      if (isOutput) {
         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
}

static void handleGuard(const QString &expr);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   s_bufferPosition = buf;
   s_prevPosition   = s_inputPosition;

   //
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

/* start command character */
/* comment parsing states */

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define GroupDocArg1 17
#define GroupDocArg2 18
#define SectionLabel 19
#define SectionTitle 20
#define SubpageLabel 21
#define SubpageTitle 22
#define FormatBlock 23
#define LineParam 24
#define GuardParam 25
#define GuardParamEnd 26
#define SkipGuardedSection 27
#define SkipInternal 28
#define NameParam 29
#define InGroupParam 30
#define FnParam 31
#define OverloadParam 32
#define InheritParam 33
#define ExtendsParam 34
#define ReadFormulaShort 35
#define ReadFormulaLong 36
#define AnchorLabel 37
#define HtmlComment 38
#define SkipLang 39
#define CiteLabel 40
#define CopyDoc 41
#define GuardExpr 42
#define CdataSection 43

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
  /* What can happen while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxy\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1207 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 10865 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // mail address
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // quoted text
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      // directory (or chain of commands)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      // HTML command ends a brief description
      setOutput(OutputMainDoc);

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 7:
YY_RULE_SETUP
{
      // HTML command that ends a brief description
      if (current->m_srcLang == SrcLangExt_CSharp) {
         setOutput(OutputMainDoc);
      }

      // continue with the same input
      REJECT;
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      // start of a .NET XML style brief description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputBrief);
      addToOutput(text);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // start of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      // end of a .NET XML style detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputBrief);
      addToOutput(text);
      setOutput(OutputMainDoc);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // end of a brief or detailed description
      QString text = QString::fromUtf8(commentscanYYtext);

      setOutput(OutputMainDoc);
      addToOutput(text);
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      QString tag = QString::fromUtf8(commentscanYYtext);

      int s = tag.indexOf("id=");

      if (s != -1) {
         // command has id attribute
         QChar c = tag[s + 3];

         if (c == '\'' || c == '"') {
            // valid start
            int e = tag.indexOf(c,s + 4);

            if (e != -1) {
               // found matching end

               QString id = tag.mid(s + 4, e-s-4);   // extract id
               addAnchor(id);
            }
         }
      }

      addToOutput(tag);
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      insidePre = true;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      insidePre = false;
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // RCS tag which end a brief description
      setOutput(OutputMainDoc);
      REJECT;
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      BEGIN(HtmlComment);
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      BEGIN(CdataSection);
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      addToOutput(" \\endinternal ");

      if (! s_processInternalDocs) {
         warn(yyFileName, yyLineNr, "Found \\endinternal without matching \\internal");
      }

      s_processInternalDocs = false;
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      // simulate calling addToOutPut()
      QString text = QString::fromUtf8(commentscanYYtext);
      s_docsEntry->appendData(EntryKey::Main_Docs, text);

   }
	YY_BREAK
case 20:
case 21:
YY_RULE_SETUP
{
      // might be a valid command
      QString text = QString::fromUtf8(commentscanYYtext);

      QStringView view = QStringView(text).trimmed();

      QString cmdName;
      QStringList optList;

      if (view.contains('{')) {
         // cmd { options }

         QString tmp = view.mid(1, 2).toLower();

         if (tmp == "f{")  {
            // handle "\f{" and "@f{" elsewhere
            REJECT;
         }

         static QRegularExpression regexp("[\\\\@](\\w+)\\s*{([^}]+)}");
         QRegularExpressionMatch match = regexp.match(view);

         // remove {CMD}
         cmdName = match.captured(1);
         optList = match.captured(2).split(',');

      } else {
         // no options
         cmdName = view.mid(1);

      }

      DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);

      if (cmdPtr) {
         // special action is required

         int i = 0;
         while (text[i] == ' ' || text[i] == '\t') {
            i++;
         }

         s_spaceBeforeCmd = text.left(i);

         if (cmdPtr->endsBrief && ! (inContext == OutputXRef && cmdName == "parblock")) {
            briefEndsAtDot = false;

            // this command forces the end of brief description
            setOutput(OutputMainDoc);
         }

         if (cmdPtr->func && cmdPtr->func(cmdName, optList)) {
            // implicit split of the comment block into two entries
            // restart the next block at the start of this command

            s_parseMore = true;

            s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition);
            yyterminate();

         } else if (cmdPtr->func == nullptr) {
            // command without handler is processed later by parserdoc.cpp
            addToOutput(text);
         }

      } else {
         // some command was found, just pass it on

         addToOutput(text);
      }
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      // escaped formula command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // language switch command
      static const QString outputLanguage = Config::getEnum("output-language");

      QString text   = QString::fromUtf8(commentscanYYtext);
      QString langId = text.trimmed().mid(2);

      if (! langId.isEmpty() && outputLanguage.compare(langId, Qt::CaseInsensitive) != 0) {
         // enable language specific section
         BEGIN(SkipLang);
      }
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // start of a formula with custom environment
      QString text = QString::fromUtf8(commentscanYYtext);

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText = "\\begin";
      formulaEnv = text.trimmed().mid(2);

      if (formulaEnv.at(formulaEnv.length() - 1) == '{') {
         // remove trailing open brace
         formulaEnv = formulaEnv.left(formulaEnv.length() - 1);
      }

      formulaText += formulaEnv;
      formulaNewLines = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // start of a inline formula
      formulaText     = "$";
      formulaNewLines = 0;
      BEGIN(ReadFormulaShort);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      // start of a block formula

      // this command forces the end of brief description
      setOutput(OutputMainDoc);

      formulaText      = "\\[";
      formulaNewLines  = 0;
      BEGIN(ReadFormulaLong);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // beginning of a group
      openGroup(current, yyFileName, yyLineNr);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      // end of a group
      QString text = QString::fromUtf8(commentscanYYtext);

      closeGroup(current, yyFileName, yyLineNr, true);

      s_memberGroupHeader.clear();
      s_parseMore    = true;
      s_needNewEntry = true;

      s_inputPosition = s_prevPosition + (yy_bp - s_bufferPosition) + text.length();
      yyterminate();
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      // escaped character
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      // normal word
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // explicit end autolist: e.g "  ."
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 32:
case 33:
YY_RULE_SETUP
{
      // start of autolist
      if (! Doxy_Globals::markdownSupport) {
         REJECT;

      } else {

         if (inContext != OutputXRef) {
            briefEndsAtDot = false;
            setOutput(OutputMainDoc);
         }

         QString text = QString::fromUtf8(commentscanYYtext);
         addToOutput(text);
      }
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // start of autolist
      if (inContext != OutputXRef) {
         briefEndsAtDot = false;
         setOutput(OutputMainDoc);
      }

      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // horizontal line (dashed)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      // escaped mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      // mdash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&mdash;");
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      // ndash
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(insidePre || Doxy_Globals::markdownSupport ? text : "&ndash;");
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      // numbered item
      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext != OutputXRef) {
         // this command forces the end of brief description
         setOutput(OutputMainDoc);
      }

      addToOutput(text);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      // . at start or in the middle of a word, or ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      // . with escaped space
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text[0]);
      addToOutput(text[2]);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      // . with comma such as "e.g.,"
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      // ellipsis with escaped space
      addToOutput("... ");
   }
	YY_BREAK
case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // internal ellipsis
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{
      // at least one blank line (or blank line command)

      QString text = QString::fromUtf8(commentscanYYtext);

      if (inContext == OutputXRef) {
         // see bug 613024, need to put the newlines after ending the XRef section.

         if (! s_insideParBlock) {
            setOutput(OutputMainDoc);
         }

         for (int i = 0; i < text.length();  ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               ++i;

            } else if (text.mid(i) == "\\_linebr")  {
               addToOutput('\n');
               i += 8;

            } else  {
               ++i;
            }
         }

      } else if (inContext != OutputBrief) {

         for (int i = 0; i< text.length(); ) {
            if (text[i] == '\n') {
               addToOutput('\n');
               i++;

            } else if (text.mid(i) == "\\_linebr")  {
                addToOutput('\n');
                i += 8;

            } else  {
               i++;

            }
         }

         setOutput(OutputMainDoc);

      } else {
          // inContext == OutputBrief
          // only go to the detailed description if we have
          // found some brief description and not just whitespace

         endBrief(false);
      }

      lineCount();
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      // potential end of a JavaDoc style comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);

      if (briefEndsAtDot) {
         setOutput(OutputMainDoc);
         briefEndsAtDot = false;
      }
   }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{
      // newline
      addToOutput('\n');
      yyLineNr++;
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // utf-8 code point
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // catch all for anything else
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 51:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // ignore unimportant characters
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // ignore every else
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      BEGIN( Comment );
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      // the special XML characters for iwhich the CDATA section is especially used
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput('\\');
      addToOutput(text[0]);
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 60:
YY_RULE_SETUP
{
      // end of inline formula
      formulaText += "$";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // end of block formula
      formulaText += "\\]";
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // end of custom env formula
      formulaText += "\\end";
      formulaText += formulaEnv;
      addToOutput(" " + addFormula());
      BEGIN(Comment);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // any non-special character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text;
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      formulaNewLines++;
      formulaText += text[0];
      yyLineNr++;
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any other character
      QString text = QString::fromUtf8(commentscanYYtext);
      formulaText += text[0];
   }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\enum");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 69:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      // handle argument
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".", "::");
      BEGIN( Comment );
   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\namespace");

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 74:
YY_RULE_SETUP
{
      // handle argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;
      BEGIN( Comment );
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\package");
      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(removeRedundantWhiteSpace(text),".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_entryName = substitute(text,".","::");
      if (current->section == Entry::PROTOCOLDOC_SEC) {
         current->m_entryName += "-p";
      }

      // prepend outer scope name
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = substitute(text,".","::");
      BEGIN( ClassDocArg2 );
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing argument after \\%s",
                  YY_START == ClassDocArg1 ? "class" : "category" );

      addToOutput('\n');

      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      // second argument, include file
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_File, text);
      BEGIN( ClassDocArg3 );
   }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput('\n');

      if (text[0] == '\n')  {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      // third argument, include file name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->setData(EntryKey::Include_Name, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] =='\n') {
         yyLineNr++;
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of {def,add,weak} group commands --------- */
case 92:
YY_RULE_SETUP
{
      // group name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = text;

      // lastDefGroup.groupname = text;
      // lastDefGroup.pri = current->groupingPri();
      // the .html stuff is for Qt compatibility

      if (current->m_entryName.endsWith(".html")) {
         current->m_entryName = current->m_entryName.left(current->m_entryName.length() - 5);
      }

      current->setData(EntryKey::Member_Type, "");
      BEGIN(GroupDocArg2);
   }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "Missing group name after %s", csPrintable(current->groupDocCmd()) );

      addToOutput('\n');
      if (text[0] == '\n') {
         yyLineNr++;
      }
      BEGIN( Comment );
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
      // title (stored in type)
      QString text = QString::fromUtf8(commentscanYYtext);
      current->appendData(EntryKey::Member_Type, text.trimmed());
   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if ( current->groupDocType == Entry::GROUPDOC_NORMAL && current->getData(EntryKey::Member_Type).isEmpty()) {
            // defgroup requires second argument
            warn(yyFileName, yyLineNr, "Missing title after \\defgroup %s", csPrintable(current->m_entryName) );
      }

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 99:
YY_RULE_SETUP
{
      // first argument; page name
      QString text  = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( PageDocArg2 );
   }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
      // missing arguement
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument after \\page");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      // second argument; page title
      QString text = QString::fromUtf8(commentscanYYtext);

      text = substitute(substitute(text, "@<","&lt;"),  "@>", "&gt;");
      text = substitute(substitute(text, "\\<","&lt;"), "\\>","&gt;");

      yyLineNr++;
      current->setData(EntryKey::Member_Args, text);

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 104:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
   }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      addToOutput(" , ");
   }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '_' && Doxy_Globals::markdownSupport) {
         addToOutput('\\');
      }

      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
      // no file name specified
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      // first argument; name
      QString text = QString::fromUtf8(commentscanYYtext);
      current->m_entryName = stripQuotes(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 112:
YY_RULE_SETUP
{
      // first argument
      newXRefItemKey = QString::fromUtf8(commentscanYYtext);
      setOutput(OutputXRef);

      BEGIN(XRefItemParam2);
   }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
      // missing arguments
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing first argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
      // second argument
      QString text = QString::fromUtf8(commentscanYYtext);
      xrefItemTitle = stripQuotes(text);
      BEGIN(XRefItemParam3);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing second argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // third argument
      QString text = QString::fromUtf8(commentscanYYtext);

      xrefListTitle = stripQuotes(text);
      xrefKind = XRef_Item;

      BEGIN( Comment );
   }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr,"Missing third argument of \\xrefitem");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      inContext = OutputMainDoc;
      BEGIN( Comment );
   }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 124:
YY_RULE_SETUP
{
      // argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->setData(EntryKey::Related_Class, text);
      BEGIN( Comment );
   }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "Missing argument of \\relates or \\memberof command");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 131:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionLabel = text;
      addToOutput(text);
      s_sectionTitle.clear();

      BEGIN(SectionTitle);
   }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\section command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // invalid character for section label
      warn(yyFileName, yyLineNr, "Invalid or missing section label");
      BEGIN(Comment);
   }
	YY_BREAK
case 134:
/* rule 134 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 135:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // end of section title
      QString text = QString::fromUtf8(commentscanYYtext);
      addSection();
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // any character without special meaning
      QString text = QString::fromUtf8(commentscanYYtext);
      s_sectionTitle += text;
      addToOutput(text);
   }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
      // unescape escaped command
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text.mid(1);
      addToOutput(text);
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // unescape escaped character
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text[1];
      addToOutput(text);
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // anything else
      QString text = QString::fromUtf8(commentscanYYtext);

      s_sectionTitle += text;
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 141:
YY_RULE_SETUP
{
      // first argument
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      // we add subpage labels as a kind of "inheritance" relation to prevent
      // needing to add another list to the Entry class.

      current->extends.append(BaseInfo(text, Public, Normal));
      BEGIN(SubpageTitle);
   }
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\subpage command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
{
      // no title, end command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // add title, end of command
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);
      BEGIN( Comment );
   }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
      // no title, end of command
      unput(commentscanYYtext[0]);
      BEGIN( Comment );
   }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 146:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addAnchor(text);
      addToOutput(text);

      BEGIN( Comment );
   }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\anchor command has no label");

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing anchor label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 149:
/* rule 149 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      // possible ends
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (text.mid(4) == blockName)  {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      if (blockName == "startuml")   {
         // found end of the block
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // some word
      QString text = QString::fromUtf8(commentscanYYtext);

      addToOutput(text);
   }
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      // start of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);

      s_commentCount++;
      addToOutput(text);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // end of a C-comment
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text);

      s_commentCount--;

      if (s_commentCount < 0 && blockName != "verbatim") {
         warn(yyFileName, yyLineNr, "Found */ without matching /* while inside a \\%s block. "
            "Perhaps there is a missing \\end%s?\n", csPrintable(blockName), csPrintable(blockName));
      }
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
{
      QString endTag = "end" + blockName;

      if (blockName == "startuml") {
         endTag = "enduml";
      }

      warn(yyFileName, yyLineNr, "Reached end of comment while inside a \\%s block, check for missing \\%s tag",
                 csPrintable(blockName), csPrintable(endTag) );

      yyterminate();
   }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 156:
YY_RULE_SETUP
{
      s_guardExpr  = QString::fromUtf8(commentscanYYtext);
      s_roundCount = 1;
      BEGIN(GuardExpr);
   }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      s_roundCount++;
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      s_guardExpr += QString::fromUtf8(commentscanYYtext);
      s_roundCount--;

      if (s_roundCount == 0) {
         handleGuard(s_guardExpr);
      }
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{
      warn(yyFileName, yyLineNr, "Invalid expression '%s' for guard", csPrintable(s_guardExpr));
      unput(commentscanYYtext[0]);
      BEGIN(GuardParam);
   }
	YY_BREAK
case 161:
YY_RULE_SETUP
{
      // parameter of if/ifnot guard
      QString text = QString::fromUtf8(commentscanYYtext);
      handleGuard(text);
   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // next line is commented out due to bug620924
      // addToOutput('\n');

      BEGIN( Comment );
   }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
{
      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      if (! s_spaceBeforeIf.isEmpty()) {
         addToOutput(s_spaceBeforeIf);
      }

      s_spaceBeforeIf.clear();
      BEGIN(Comment);
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      unput(commentscanYYtext[0]);
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 168:
/* rule 168 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_IfNot;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      guardType = Guard_If;
      BEGIN( GuardParam );
   }
	YY_BREAK
case 170:
/* rule 170 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

       } else {
         GuardedSection s   = s_guards.pop();
         bool parentVisible = s.parentVisible();

         if (parentVisible) {
            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 171:
/* rule 171 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName, yyLineNr, "Found \\else without matching start command");

      } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            s_guards.pop();
            s_guards.push(GuardedSection(true,true));

            enabledSectionFound = true;
            BEGIN( GuardParamEnd );
         }
      }
   }
	YY_BREAK
case 172:
/* rule 172 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_guards.isEmpty()) {
         warn(yyFileName,yyLineNr, "Found \\elseif without matching start command");

       } else {

         if (! enabledSectionFound && s_guards.top().parentVisible()) {
            guardType = Guard_If;
            s_guards.pop();

            BEGIN( GuardParam );
         }
      }
   }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      // addToOutput('\n');
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{
      // skip line
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
   }
	YY_BREAK
case 177:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 178:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount++;
   }
	YY_BREAK
case 179:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      s_condCount--;

      if (s_condCount < 0 )   {
         // handle conditional section around \internal, see bug607743

         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 180:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 0 ) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 181:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 1)  {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 182:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 2) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 183:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
{
      if (s_sectionLevel > 3) {
         unput('\\');
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 184:
YY_RULE_SETUP
{
      BEGIN(Comment);
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      // skip non-special characters
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
{
      // end of argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
      s_memberGroupHeader+=' ';
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      s_memberGroupHeader  += text[0];
      current->m_entryName += text[0];
   }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 190:
YY_RULE_SETUP
{
      // group id
      QString text = QString::fromUtf8(commentscanYYtext);

      current->m_groups.append(Grouping(text, Grouping::GROUPING_INGROUP) );
      inGroupParamFound = true;
   }
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      if (! inGroupParamFound) {
         warn(yyFileName,yyLineNr, "Missing group name for \\ingroup command");
      }

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      addToOutput('\n');
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // ignore other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      addToOutput(text[0]);
   }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
{
      // end of fn declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (braceCount == 0) {
         if (text[0] == '\n')   {
            yyLineNr++;
         }

         addToOutput('\n');

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }

         BEGIN( Comment );
      }
   }
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 196:
YY_RULE_SETUP
{
      // non-special characters
      functionProto += QString::fromUtf8(commentscanYYtext);
   }
	YY_BREAK
case 197:
YY_RULE_SETUP
{
      functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount++;
   }
	YY_BREAK
case 198:
YY_RULE_SETUP
{
      functionProto += QString::fromUtf8(commentscanYYtext);
      braceCount--;
   }
	YY_BREAK
case 199:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
{
      // end of overload declaration, pass to langParser as a "prototype"
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      if (functionProto.trimmed().isEmpty()) {
         // plain overload command
         addToOutput(theTranslator->trOverloadText());
         addToOutput('\n');

      }  else   {
         // overload declaration
         makeStructuralIndicator(Entry::OVERLOADDOC_SEC);

         if (langParser != nullptr) {
            // not used for clang parsing
            langParser->parsePrototype(functionProto);
         }
      }

      BEGIN( Comment );
   }
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      // line continuation
      yyLineNr++;
      functionProto += ' ';
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
      // add other stuff
      QString text = QString::fromUtf8(commentscanYYtext);
      functionProto += text[0];
   }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 203:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text), Public, Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);

      warn(yyFileName, yyLineNr, "\\inherit command has no argument");

      if (text[0] == '\n')  {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
      // invalid character for anchor label
      warn(yyFileName, yyLineNr, "Invalid or missing name for \\inherit command");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 206:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);
      current->extends.append(BaseInfo(removeRedundantWhiteSpace(text),Public,Normal));
      BEGIN( Comment );
   }
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName,yyLineNr, "\\extends or \\implements command has no argument");

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
      // ignore other stuff
   }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 209:
YY_RULE_SETUP
{
      // language switch
      QString text = QString::fromUtf8(commentscanYYtext);
      QString langId = text.mid(2);

      if (langId.isEmpty() || Config::getEnum("output-language").compare(langId, Qt::CaseInsensitive) == 0) {
         // enable language specific section
         BEGIN(Comment);
      }
   }
	YY_BREAK
case 210:
YY_RULE_SETUP
{
      /* any character not a *, @, backslash or new line */
   }
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
{
      // new line in verbatim block
      QString text = QString::fromUtf8(commentscanYYtext);

      if (text[0] == '\n') {
         yyLineNr++;
      }
   }
	YY_BREAK
case 212:
YY_RULE_SETUP
{
      // any other character
   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 213:
YY_RULE_SETUP
{
      // found argument
      QString text = QString::fromUtf8(commentscanYYtext);

      addCite();
      addToOutput(text);
      BEGIN(Comment);
   }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
{
      // missing argument
      QString text = QString::fromUtf8(commentscanYYtext);
      warn(yyFileName, yyLineNr, "\\cite command has no label" );

      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');
      BEGIN( Comment );
   }
	YY_BREAK
case 215:
YY_RULE_SETUP
{
      // invalid character for cite label
      warn(yyFileName,yyLineNr, "Invalid or missing cite label");
      BEGIN(Comment);
   }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      if (text[0] == '\n')   {
         yyLineNr++;
      }

      addToOutput('\n');

      setOutput(OutputMainDoc);
      addToOutput("\\copydetails ");
      addToOutput(s_copyDocArg);

      addToOutput("\n");

      BEGIN(Comment);
   }
	YY_BREAK
case 217:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 218:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(commentscanYYtext);
      s_copyDocArg += text;
      addToOutput(text);
   }
	YY_BREAK
case 219:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1207 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1207 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1206);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static bool handleBrief(const QString &str, const QStringList &list)
{
   setOutput(OutputBrief);
   return false;
}

static bool handleFn(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERDOC_SEC);
   functionProto.clear();
   braceCount = 0;
   BEGIN(FnParam);

   return stop;
}

static bool handleDef(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::DEFINEDOC_SEC);
   functionProto.clear();
   BEGIN(FnParam);
   return stop;
}

static bool handleOverload(const QString &str, const QStringList &list)
{
   functionProto.clear();
   BEGIN(OverloadParam);
   return false;
}

static bool handleEnum(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::ENUMDOC_SEC);
   BEGIN(EnumDocArg1);
   return stop;
}

static bool handleDefGroup(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_NORMAL;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleAddToGroup(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_ADD;
   BEGIN( GroupDocArg1 );

   return stop;
}

static bool handleWeakGroup(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::GROUPDOC_SEC);
   current->groupDocType = Entry::GROUPDOC_WEAK;
   BEGIN( GroupDocArg1 );
   return stop;
}

static bool handleNamespace(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
   BEGIN( NameSpaceDocArg1 );
   return stop;
}

static bool handlePackage(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
   BEGIN( PackageDocArg1 );
   return stop;
}

static bool handleClass(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::CLASSDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleHeaderFile(const QString &str, const QStringList &list)
{
   BEGIN( ClassDocArg2 );
   return false;
}

static bool handleProtocol(const QString &str, const QStringList &list)
{
   // Obj-C protocol
   bool stop = makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleCategory(const QString &str, const QStringList &list)
{
   // Obj-C category
   bool stop = makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
   BEGIN( CategoryDocArg1 );
   return stop;
}

static bool handleUnion(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::UNIONDOC_SEC);
   BEGIN( ClassDocArg1 );
   return stop;
}

static bool handleStruct(const QString &str, const QStringList &list)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(const QString &str, const QStringList &list)
{
  bool stop = makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(const QString &str, const QStringList &list)
{
  bool stop = makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::PAGEDOC_SEC);
   BEGIN( PageDocArg1 );
   return stop;
}

static bool handleMainpage(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);

   if (! stop) {
      current->m_entryName = "mainpage";
   }

   BEGIN( PageDocArg2 );
   return stop;
}

static bool handleFile(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::FILEDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleParam(const QString &str, const QStringList &list)
{
  // process param and retval arguments to escape leading underscores
  // in case of markdown processing

  addToOutput("@param ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleRetval(const QString &str, const QStringList &list)
{
  addToOutput("@retval ");
  BEGIN( ParamArg1 );

  return false;
}

static bool handleDir(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::DIRDOC_SEC);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleExample(const QString &str, const QStringList &list)
{
  Entry::Sections section = Entry::EXAMPLE_SEC;

  for (auto item : list) {
    QString opt = item.trimmed().toLower();

    if (opt == "lineno") {
      section = Entry::EXAMPLE_LINENO_SEC;

    } else {
      warn(yyFileName, yyLineNr, "Unsupported option '%s' for command '\\%s'", csPrintable(opt), csPrintable(str));
    }
  }
   bool stop = makeStructuralIndicator(section);

   if (! stop) {
      current->m_entryName = yyFileName;
   }

   BEGIN( FileDocArg1 );
   return stop;
}

static bool handleDetails(const QString &str, const QStringList &list)
{
   if (inContext != OutputBrief) {
      // treat @details outside brief description as a new paragraph
      addToOutput("\n\n");
   }

   setOutput(OutputMainDoc);
   return false;
}

static bool handleName(const QString &str, const QStringList &list)
{
   bool stop = makeStructuralIndicator(Entry::MEMBERGRP_SEC);

   if (! stop) {
      s_memberGroupHeader.resize(0);
      BEGIN( NameParam );

      if (s_memberGroupId != DOX_NOGROUP) {
         // end of previous member group

         closeGroup(current,yyFileName,yyLineNr,true);
       }
  }

  return stop;
}

static bool handleTodo(const QString &str, const QStringList &list)
{
   newXRefKind = XRef_Todo;
   setOutput(OutputXRef);
   xrefKind = XRef_Todo;
   return false;
}

static bool handleTest(const QString &str, const QStringList &list)
{
   newXRefKind = XRef_Test;
   setOutput(OutputXRef);
   xrefKind = XRef_Test;
   return false;
}

static bool handleBug(const QString &str, const QStringList &list)
{
   newXRefKind = XRef_Bug;
   setOutput(OutputXRef);
   xrefKind = XRef_Bug;
   return false;
}

static bool handleDeprecated(const QString &str, const QStringList &list)
{
   newXRefKind = XRef_Deprecated;
   setOutput(OutputXRef);
   xrefKind = XRef_Deprecated;
   return false;
}

static bool handleXRefItem(const QString &str, const QStringList &list)
{
   newXRefKind = XRef_Item;
   BEGIN(XRefItemParam1);
   return false;
}

static bool handleParBlock(const QString &str, const QStringList &list)
{
   if (s_insideParBlock)   {
      warn(yyFileName,yyLineNr, "Found \\parblock command while already in a parblock");
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@parblock ");
   s_insideParBlock = true;

   return false;
}

static bool handleEndParBlock(const QString &str, const QStringList &list)
{
   if (! s_insideParBlock) {
      warn(yyFileName,yyLineNr, "Found \\endparblock command without matching \\parblock");
   }

   addToOutput("@endparblock");
   setOutput(OutputMainDoc);    // to end a parblock inside a xrefitem like context
   s_insideParBlock = false;

   return false;
}

static bool handleRelated(const QString &str, const QStringList &list)
{
   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName,yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Simple;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRelatedAlso(const QString &str, const QStringList &list)
{
   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = Duplicate;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleMemberOf(const QString &str, const QStringList &list)
{
   if (! current->getData(EntryKey::Related_Class).isEmpty()) {
      warn(yyFileName, yyLineNr,
                  "Found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
   }

   current->relatesType = MemberOf;
   BEGIN(RelatesParam1);

   return false;
}

static bool handleRefItem(const QString &str, const QStringList &list)
{
   addToOutput("@refitem ");
   BEGIN(LineParam);
   return false;
}

static bool handleSection(const QString &str, const QStringList &list)
{
   setOutput(OutputMainDoc);
   addToOutput("@"+str+" ");
   BEGIN(SectionLabel);

   if (str == "section") {
      s_sectionLevel = 1;

   } else if (str == "subsection") {
      s_sectionLevel = 2;

   } else if (str == "subsubsection") {
      s_sectionLevel = 3;

   } else if (str == "paragraph") {
      s_sectionLevel = 4;

   }

   return false;
}

static bool handleSubpage(const QString &str, const QStringList &list)
{
   if (current->section != Entry::EMPTY_SEC && current->section != Entry::PAGEDOC_SEC &&
         current->section != Entry::MAINPAGEDOC_SEC) {

      warn(yyFileName, yyLineNr, "Found \\subpage command in a comment block that is not marked as a page");
  }

  if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.clear();
  }

   addToOutput("@" + str + " ");
   BEGIN(SubpageLabel);

   return false;
}

static bool handleAnchor(const QString &str, const QStringList &list)
{
   addToOutput("@" + str + " ");
   BEGIN(AnchorLabel);
   return false;
}

static bool handleCite(const QString &str, const QStringList &list)
{
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("@" + str + " ");
   BEGIN(CiteLabel);
   return false;
}

static bool handleFormatBlock(const QString &str, const QStringList &list)
{
   if (list.isEmpty()) {
      addToOutput("@" + str + " ");

   } else {
      addToOutput("@" + str + "{" + list.join(",") + "} ");
   }

   blockName      = str;
   s_commentCount = 0;
   BEGIN(FormatBlock);

   return false;
}

static bool handleAddIndex(const QString &str, const QStringList &list)
{
   addToOutput("@addindex ");
   BEGIN(LineParam);
   return false;
}

static bool handleIf(const QString &str, const QStringList &list)
{
   enabledSectionFound = false;
   guardType = Guard_If;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleIfNot(const QString &str, const QStringList &list)
{
   enabledSectionFound = false;
   guardType = Guard_IfNot;
   s_spaceBeforeIf = s_spaceBeforeCmd;
   BEGIN(GuardParam);

   return false;
}

static bool handleElseIf(const QString &str, const QStringList &list)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      guardType = enabledSectionFound ? Guard_Skip : Guard_If;
      BEGIN(GuardParam);
   }

   return false;
}

static bool handleElse(const QString &str, const QStringList &list)
{
   if (s_guards.isEmpty()) {
      warn(yyFileName,yyLineNr, "Found \\else without matching start command");

   } else {
      BEGIN( SkipGuardedSection );
   }

   return false;
}

static bool handleEndIf(const QString &str, const QStringList &list)
{
   if (s_guards.isEmpty())   {
      warn(yyFileName,yyLineNr, "Found \\endif without matching start command");

   } else {
      s_guards.pop();
   }

   enabledSectionFound = false;
   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   BEGIN( GuardParamEnd );
   return false;
}

static bool handleIngroup(const QString &str, const QStringList &list)
{
   inGroupParamFound = false;
   BEGIN( InGroupParam );
   return false;
}

static bool handleNoSubGrouping(const QString &str, const QStringList &list)
{
   current->subGrouping = false;
   return false;
}

static bool handleShowInitializer(const QString &str, const QStringList &list)
{
   current->initLines = 100000;  // ON
   return false;
}

static bool handleHideInitializer(const QString &str, const QStringList &list)
{
   current->initLines = 0;
   return false;
}

static bool handleCallgraph(const QString &str, const QStringList &list)
{
   current->callGraph = true;
   return false;
}

static bool handleHideCallgraph(const QString &str, const QStringList &list)
{
   current->callGraph = false;
   return false;
}

static bool handleCallergraph(const QString &str, const QStringList &list)
{
   current->callerGraph = true;
   return false;
}

static bool handleHideCallergraph(const QString &str, const QStringList &list)
{
   current->callerGraph = false;
   return false;
}

static bool handleReferencedByRelation(const QString &str, const QStringList &list)
{
   current->referencedByRelation = true;
   return false;
}

static bool handleHideReferencedByRelation(const QString &str, const QStringList &list)
{
   current->referencedByRelation = false;
   return false;
}

static bool handleReferencesRelation(const QString &str, const QStringList &list)
{
   current->referencesRelation = true;
   return false;
}

static bool handleHideReferencesRelation(const QString &str, const QStringList &list)
{
   current->referencesRelation = false;
   return false;
}

static bool handleInternal(const QString &str, const QStringList &list)
{
   if (s_internalDocs) {
      addToOutput(" \\internal ");
      s_processInternalDocs = true;

   } else {
      // make sure some whitespace before an \internal command
      // is not treated as "documentation"

      if (current->getData(EntryKey::Main_Docs).trimmed().isEmpty()) {
         current->setData(EntryKey::Main_Docs, "");
      }

      s_condCount = 0;
      BEGIN( SkipInternal );
  }

  return false;
}

static bool handleLineBr(const QString &str, const QStringList &list)
{
   addToOutput('\n');
   return false;
}

static bool handleStatic(const QString &str, const QStringList &list)
{
   endBrief();
   current->stat = true;
   return false;
}

static bool handlePure(const QString &str, const QStringList &list)
{
   endBrief();
   current->virt = Pure;
   return false;
}

static bool handlePrivate(const QString &str, const QStringList &list)
{
  current->protection = Private;
  return false;
}

static bool handlePrivateSection(const QString &str, const QStringList &list)
{
   current->protection = protection = Private;
   return false;
}

static bool handleProtected(const QString &str, const QStringList &list)
{
   current->protection = Protected;
   return false;
}

static bool handleProtectedSection(const QString &str, const QStringList &list)
{
   current->protection = protection = Protected;
   return false;
}

static bool handlePublic(const QString &str, const QStringList &list)
{
   current->protection = Public;
   return false;
}

static bool handlePublicSection(const QString &str, const QStringList &list)
{
   current->protection = protection = Public;
   return false;
}

static bool handleToc(const QString &str, const QStringList &list)
{
   if (current->section == Entry::PAGEDOC_SEC || current->section == Entry::MAINPAGEDOC_SEC) {

      for (auto &item : list) {
         QString option = item.trimmed().toLower();

         int level = 5;
         int i     = option.find(':');

         if (i > 0) {
            // found something like "html:4"
            bool ok = false;
            level = option.mid(i + 1).toInteger<int>(&ok);

            if (ok) {
               level  = (level >  5 ? 5 : level);
               level  = (level <= 0 ? 5 : level);
               option = option.left(i).trimmed();

            } else {
               warn(yyFileName, yyLineNr, "Unknown option level specified with \\tableofcontents: `%s'", csPrintable(option));
               option = "";
            }
         }

         if (! option.isEmpty()) {
            if (option == "html") {
               current->localToc.enableHtml(level);

            } else if (option == "latex") {
               current->localToc.enableLatex(level);

            } else if (option == "xml") {
               current->localToc.enableXml(level);

            } else if (option == "docbook") {
               current->localToc.enableDocbook(level);

            } else {
               warn(yyFileName, yyLineNr, "Unknown option specified with \\tableofcontents: `%s'", csPrintable(option));
            }
         }
      }

      if (current->localToc.nothingEnabled()) {
         // for backward compatibility
         current->localToc.enableHtml(5);
         current->localToc.enableXml(5);
      }
   }

   return false;
}

static bool handleInherit(const QString &str, const QStringList &list)
{
   BEGIN(InheritParam);
   return false;
}

static bool handleExtends(const QString &str, const QStringList &list)
{
   BEGIN(ExtendsParam);
   return false;
}

static bool handleCopyBrief(const QString &str, const QStringList &list)
{
   if (current->getData(EntryKey::Brief_Docs).isEmpty() && current->getData(EntryKey::Main_Docs).isEmpty()) {

      // if we do not have a brief or detailed description yet,
      // then the @copybrief should end up in the brief description.
      // otherwise it will be copied inline (see bug691315 & bug700788)

      setOutput(OutputBrief);
   }

   if (! s_spaceBeforeCmd.isEmpty()) {
      addToOutput(s_spaceBeforeCmd);
      s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   return false;
}

static bool handleCopyDetails(const QString &str, const QStringList &list)
{
   setOutput(OutputMainDoc);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copydetails ");
   return false;
}

static bool handleCopyDoc(const QString &str, const QStringList &list)
{
   setOutput(OutputBrief);
   if (! s_spaceBeforeCmd.isEmpty()) {
     addToOutput(s_spaceBeforeCmd);
     s_spaceBeforeCmd.resize(0);
   }

   addToOutput("\\copybrief ");
   s_copyDocArg.resize(0);
   BEGIN(CopyDoc);

   return false;
}

static void checkFormula()
{
   if (YY_START == ReadFormulaShort || YY_START == ReadFormulaLong) {
      warn(yyFileName, yyLineNr, "End of comment block while inside formula.");
   }
}

// main entry point
bool parseCommentBlock(ParserInterface *parser, QSharedPointer<Entry> curEntry, const QString &comment,
                  const QString &fileName, int &lineNr, bool isBrief, bool isAutoBrief, bool isInbody,
                  Protection &r_protection, int &r_position, bool &r_newEntryNeeded )
{
   initParser();
   s_guards.clear();

   if (comment.isEmpty()) {
      // avoid empty strings
      return false;
   }

   if (Doxy_Globals::markdownSupport) {
      s_inputString = processMarkdown(fileName, lineNr, QSharedPointer<Entry>(), comment);

      QStringView tmp(s_inputString);

      while (tmp.startsWith(" ")) {
         tmp = tmp.mid(1);
      }

      while (tmp.startsWith("\n")) {
         tmp = tmp.mid(1);
      }

      if (tmp.startsWith("<br>")) {
         tmp = tmp.mid(4);
      }

      s_inputString = QString(tmp);

   } else {
      s_inputString  = comment;
   }

   s_inputString.append(" ");

   yyFileName       = fileName;
   yyLineNr         = lineNr;
   langParser       = parser;
   current          = curEntry;

   briefEndsAtDot   = isAutoBrief;
   inBody           = isInbody;
   protection       = r_protection;
   s_inputPosition  = r_position;
   s_outputXRef     = "";
   xrefKind         = XRef_None;

   xrefAppendFlag   = false;
   insidePre        = false;
   s_needNewEntry   = false;
   s_parseMore      = false;

   if (isBrief || isAutoBrief) {
      setOutput(OutputBrief);

   } else {
      setOutput(OutputMainDoc);
   }

   s_condCount    = 0;
   s_sectionLevel = 0;

   s_spaceBeforeCmd.clear();
   s_spaceBeforeIf.clear();

   if (! current->getData(EntryKey::Main_Docs).isEmpty()) {
      // separate detailed doc fragments
      current->appendData(EntryKey::Main_Docs,  "\n\n");
   }

   if (! current->getData(EntryKey::Inbody_Docs).isEmpty() && isInbody) {
      // separate in body fragments
      current->appendData(EntryKey::Inbody_Docs, "\n\n");
   }

   commentscanYYrestart(commentscanYYin);
   BEGIN( Comment );
   commentscanYYlex();

   setOutput(OutputMainDoc);

   if (YY_START == OverloadParam) {
      // comment ended with \overload
      addToOutput(theTranslator->trOverloadText());
   }

   if (! s_guards.isEmpty()) {
      warn(yyFileName, yyLineNr, "Documentation block ended in the middle of a conditional section");
   }

   if (s_insideParBlock) {
      warn(yyFileName, yyLineNr, "Documentation block ended while inside a \\parblock. Missing \\endparblock");
   }

   // removes blank lines from the detailed docs
   current->setData(EntryKey::Main_Docs, trimEmptyLines(current->getData(EntryKey::Main_Docs), current->docLine));

   if (current->section == Entry::FILEDOC_SEC && current->getData(EntryKey::Main_Docs).isEmpty()) {
      // to allow a comment block with just a @file command
      current->setData(EntryKey::Main_Docs, "\n\n");
   }

   if (current->section == Entry::MEMBERGRP_SEC && s_memberGroupId == DOX_NOGROUP) {
      // @name section but no group started yet
      openGroup(current, yyFileName, yyLineNr);
   }

   checkFormula();
   r_protection = protection;

   groupAddDocs(curEntry);
   r_newEntryNeeded = s_needNewEntry;

   if (s_parseMore && r_position == s_inputPosition) {
      // did not proceed during this call, do not continue or there will be an infinate loop
      s_parseMore = false;
   }

   if (s_parseMore) {
      r_position = s_inputPosition;
   } else {
      r_position = 0;
   }

   lineNr = yyLineNr;

   return s_parseMore;
}

void groupEnterFile(const QString &fileName, int)
{
   s_autoGroupStack.clear();
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupDocs.clear();
   s_memberGroupRelates.clear();
   s_compoundName = fileName;
}

void groupLeaveFile(const QString &fileName, int line)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();

   if (! s_autoGroupStack.isEmpty()) {
      warn(fileName, line, "End of file while inside a group\n");
   }
}

void groupEnterCompound(const QString &fileName, int line, const QString &name)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      warn(fileName, line, "Try to put compound %s inside a member group\n", csPrintable(name));
   }

   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.clear();
   s_memberGroupDocs.clear();
   s_compoundName = name;

   int i = s_compoundName.indexOf('(');

   if (i != -1) {
      // strip category (Obj-C)
      s_compoundName=s_compoundName.left(i);
   }

   if (s_compoundName.isEmpty()) {
      s_compoundName=fileName;
   }
}

void groupLeaveCompound(const QString &, int, const QString &)
{
   s_memberGroupId = DOX_NOGROUP;
   s_memberGroupRelates.resize(0);
   s_memberGroupDocs.resize(0);
   s_compoundName.resize(0);
}

static int findExistingGroup(int &groupId, const QSharedPointer<MemberGroupInfo> info)
{
   for (auto di = Doxy_Globals::memGrpInfoDict.begin(); di != Doxy_Globals::memGrpInfoDict.end(); ++di) {

      auto mi = *di;

      if (s_compoundName == mi->compoundName && ! mi->header.isEmpty() &&
               mi->header.compare(info->header, Qt::CaseInsensitive) == 0) {

         // same file or scope, not a nameless group, same header name
         return (int)di.key();    // put the item in this group
      }
   }

   groupId++; // start new group
   return groupId;
}

void openGroup(QSharedPointer<Entry> e, const QString &, int)
{
   if (e->section == Entry::GROUPDOC_SEC) {
      // auto group
      s_autoGroupStack.push( QMakeShared<Grouping>(e->m_entryName, e->groupingPri()) );

   } else {
      // start of a member group

      if (s_memberGroupId == DOX_NOGROUP) {
         // no group started yet
         static int curGroupId = 0;

         QSharedPointer<MemberGroupInfo> info = QMakeShared<MemberGroupInfo>();

         info->header = s_memberGroupHeader.trimmed();
         info->compoundName = s_compoundName;
         s_memberGroupId = findExistingGroup(curGroupId, info);

         Doxy_Globals::memGrpInfoDict.insert(s_memberGroupId, info);

         s_memberGroupRelates = e->getData(EntryKey::Related_Class);
         e->mGrpId = s_memberGroupId;
      }
   }
}

void closeGroup(QSharedPointer<Entry> e, const QString &fileName, int line, bool foundInline)
{
   if (s_memberGroupId != DOX_NOGROUP) {
      // end of member group

      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         // known group
         info->doc     = s_memberGroupDocs;
         info->docFile = fileName;
         info->docLine = line;
      }

      s_memberGroupId = DOX_NOGROUP;
      s_memberGroupRelates.resize(0);
      s_memberGroupDocs.resize(0);

      if (! foundInline) {
         e->mGrpId = DOX_NOGROUP;
      }

   } else if (! s_autoGroupStack.isEmpty()) {
      // end of auto group
      QSharedPointer<Grouping> grp = s_autoGroupStack.pop();

      // see bug577005: we should not remove the last group for e
      if (! foundInline) {
         e->m_groups.removeLast();
      }

      if (! foundInline) {
         initGroupInfo(e);
      }
   }
}

void initGroupInfo(QSharedPointer<Entry> e)
{
   e->mGrpId  = s_memberGroupId;
   e->setData(EntryKey::Related_Class, s_memberGroupRelates);

   if (! s_autoGroupStack.isEmpty()) {
      e->m_groups.append(*s_autoGroupStack.top());
   }
}

static void groupAddDocs(QSharedPointer<Entry> e)
{
   if (e->section == Entry::MEMBERGRP_SEC) {
      s_memberGroupDocs = e->getData(EntryKey::Brief_Docs).trimmed();

      e->setData(EntryKey::Main_Docs, trimEmptyLines(e->getData(EntryKey::Main_Docs), e->docLine));

      if (! s_memberGroupDocs.isEmpty() && ! e->getData(EntryKey::Main_Docs).isEmpty()) {
         s_memberGroupDocs+="\n\n";
      }

      s_memberGroupDocs += e->getData(EntryKey::Main_Docs);
      QSharedPointer<MemberGroupInfo> info = Doxy_Globals::memGrpInfoDict.value(s_memberGroupId);

      if (info) {
         info->doc      = s_memberGroupDocs;
         info->docFile  = e->getData(EntryKey::MainDocs_File);
         info->docLine  = e->docLine;
         info->setRefItems(e->m_specialLists);
      }

      e->setData(EntryKey::Brief_Docs, "");
      e->setData(EntryKey::Main_Docs,  "");
   }
}

static void handleGuard(const QString &expr)
{
   CondParser prs;
   bool sectionEnabled = prs.parse(yyFileName, yyLineNr, expr.trimmed());
   bool parentEnabled  = true;

   if (! s_guards.isEmpty()) {
      parentEnabled = s_guards.top().isEnabled();
   }

   if (parentEnabled) {
      if ( (sectionEnabled && guardType == Guard_If) || (! sectionEnabled && guardType == Guard_IfNot)) {
         // section is visible
         s_guards.push(GuardedSection(true, true));
         enabledSectionFound = true;
         BEGIN( GuardParamEnd );

      } else {
         // section is invisible
         if (guardType != Guard_Skip) {
            s_guards.push(GuardedSection(false, true));
         }

         BEGIN( SkipGuardedSection );
      }

   } else {
      // invisible because of parent
      s_guards.push(GuardedSection(false, false));
      BEGIN( SkipGuardedSection );
   }
}

